
MCU_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000288c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029bc  080029bc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080029bc  080029bc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029bc  080029bc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029bc  080029bc  000129bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080029c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000005c  08002a20  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002a20  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ab8  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b9b  00000000  00000000  00029b3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a98  00000000  00000000  0002b6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eec  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0a9  00000000  00000000  000439dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000823cb  00000000  00000000  0004fa85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1e50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002968  00000000  00000000  000d1ea4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002980 	.word	0x08002980

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002980 	.word	0x08002980

0800014c <isButtonPressed>:
int KeyReg3[NUM_BUTTON]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200,200,200};
int button_flag[NUM_BUTTON] = {0,0,0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <subKeyProcess>:

void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000078 	.word	0x20000078

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e069      	b.n	8000280 <getKeyInput+0xe0>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a38      	ldr	r2, [pc, #224]	; (8000290 <getKeyInput+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4937      	ldr	r1, [pc, #220]	; (8000294 <getKeyInput+0xf4>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a36      	ldr	r2, [pc, #216]	; (8000298 <getKeyInput+0xf8>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4932      	ldr	r1, [pc, #200]	; (8000290 <getKeyInput+0xf0>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, mode[i]);
 80001cc:	4a33      	ldr	r2, [pc, #204]	; (800029c <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4832      	ldr	r0, [pc, #200]	; (80002a0 <getKeyInput+0x100>)
 80001d8:	f001 fbb2 	bl	8001940 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	4619      	mov	r1, r3
 80001e0:	4a2d      	ldr	r2, [pc, #180]	; (8000298 <getKeyInput+0xf8>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){ //avoid noise
 80001e8:	4a29      	ldr	r2, [pc, #164]	; (8000290 <getKeyInput+0xf0>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	4929      	ldr	r1, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d13e      	bne.n	800027a <getKeyInput+0xda>
 80001fc:	4a24      	ldr	r2, [pc, #144]	; (8000290 <getKeyInput+0xf0>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	4923      	ldr	r1, [pc, #140]	; (8000294 <getKeyInput+0xf4>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020c:	429a      	cmp	r2, r3
 800020e:	d134      	bne.n	800027a <getKeyInput+0xda>
			if (KeyReg2[i] != KeyReg3[i]){ //change state
 8000210:	4a20      	ldr	r2, [pc, #128]	; (8000294 <getKeyInput+0xf4>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4922      	ldr	r1, [pc, #136]	; (80002a4 <getKeyInput+0x104>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d016      	beq.n	8000252 <getKeyInput+0xb2>
				KeyReg3[i] = KeyReg2[i];
 8000224:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <getKeyInput+0xf4>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	491d      	ldr	r1, [pc, #116]	; (80002a4 <getKeyInput+0x104>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000234:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <getKeyInput+0x104>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d11c      	bne.n	800027a <getKeyInput+0xda>
					TimeOutForKeyPress[i] = 200;
 8000240:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <getKeyInput+0x108>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	21c8      	movs	r1, #200	; 0xc8
 8000246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e013      	b.n	800027a <getKeyInput+0xda>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 8000252:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <getKeyInput+0x108>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	1e5a      	subs	r2, r3, #1
 800025c:	4912      	ldr	r1, [pc, #72]	; (80002a8 <getKeyInput+0x108>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <getKeyInput+0x108>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d104      	bne.n	800027a <getKeyInput+0xda>
					KeyReg3[i] = NORMAL_STATE;
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <getKeyInput+0x104>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2101      	movs	r1, #1
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NUM_BUTTON; i++){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3301      	adds	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	dd92      	ble.n	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000014 	.word	0x20000014
 8000294:	20000020 	.word	0x20000020
 8000298:	20000008 	.word	0x20000008
 800029c:	20000000 	.word	0x20000000
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000038 	.word	0x20000038

080002ac <clearSignal>:
 */


#include "display7SEG.h"

void clearSignal(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <clearSignal+0x38>)
 80002b8:	f001 fb59 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <clearSignal+0x38>)
 80002c4:	f001 fb53 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <clearSignal+0x38>)
 80002d0:	f001 fb4d 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <clearSignal+0x38>)
 80002dc:	f001 fb47 	bl	800196e <HAL_GPIO_WritePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010800 	.word	0x40010800

080002e8 <display7SEG>:

void display7SEG(int num){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (num==0){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d123      	bne.n	800033e <display7SEG+0x56>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2101      	movs	r1, #1
 80002fa:	48c2      	ldr	r0, [pc, #776]	; (8000604 <display7SEG+0x31c>)
 80002fc:	f001 fb37 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2102      	movs	r1, #2
 8000304:	48bf      	ldr	r0, [pc, #764]	; (8000604 <display7SEG+0x31c>)
 8000306:	f001 fb32 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2104      	movs	r1, #4
 800030e:	48bd      	ldr	r0, [pc, #756]	; (8000604 <display7SEG+0x31c>)
 8000310:	f001 fb2d 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2108      	movs	r1, #8
 8000318:	48ba      	ldr	r0, [pc, #744]	; (8000604 <display7SEG+0x31c>)
 800031a:	f001 fb28 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2110      	movs	r1, #16
 8000322:	48b8      	ldr	r0, [pc, #736]	; (8000604 <display7SEG+0x31c>)
 8000324:	f001 fb23 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2120      	movs	r1, #32
 800032c:	48b5      	ldr	r0, [pc, #724]	; (8000604 <display7SEG+0x31c>)
 800032e:	f001 fb1e 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000332:	2201      	movs	r2, #1
 8000334:	2140      	movs	r1, #64	; 0x40
 8000336:	48b3      	ldr	r0, [pc, #716]	; (8000604 <display7SEG+0x31c>)
 8000338:	f001 fb19 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
	}
}
 800033c:	e15d      	b.n	80005fa <display7SEG+0x312>
	else if (num==1){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d123      	bne.n	800038c <display7SEG+0xa4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2101      	movs	r1, #1
 8000348:	48ae      	ldr	r0, [pc, #696]	; (8000604 <display7SEG+0x31c>)
 800034a:	f001 fb10 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	2102      	movs	r1, #2
 8000352:	48ac      	ldr	r0, [pc, #688]	; (8000604 <display7SEG+0x31c>)
 8000354:	f001 fb0b 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2104      	movs	r1, #4
 800035c:	48a9      	ldr	r0, [pc, #676]	; (8000604 <display7SEG+0x31c>)
 800035e:	f001 fb06 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2108      	movs	r1, #8
 8000366:	48a7      	ldr	r0, [pc, #668]	; (8000604 <display7SEG+0x31c>)
 8000368:	f001 fb01 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2110      	movs	r1, #16
 8000370:	48a4      	ldr	r0, [pc, #656]	; (8000604 <display7SEG+0x31c>)
 8000372:	f001 fafc 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2120      	movs	r1, #32
 800037a:	48a2      	ldr	r0, [pc, #648]	; (8000604 <display7SEG+0x31c>)
 800037c:	f001 faf7 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	489f      	ldr	r0, [pc, #636]	; (8000604 <display7SEG+0x31c>)
 8000386:	f001 faf2 	bl	800196e <HAL_GPIO_WritePin>
}
 800038a:	e136      	b.n	80005fa <display7SEG+0x312>
	else if (num==2){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d123      	bne.n	80003da <display7SEG+0xf2>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2101      	movs	r1, #1
 8000396:	489b      	ldr	r0, [pc, #620]	; (8000604 <display7SEG+0x31c>)
 8000398:	f001 fae9 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2102      	movs	r1, #2
 80003a0:	4898      	ldr	r0, [pc, #608]	; (8000604 <display7SEG+0x31c>)
 80003a2:	f001 fae4 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2104      	movs	r1, #4
 80003aa:	4896      	ldr	r0, [pc, #600]	; (8000604 <display7SEG+0x31c>)
 80003ac:	f001 fadf 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2108      	movs	r1, #8
 80003b4:	4893      	ldr	r0, [pc, #588]	; (8000604 <display7SEG+0x31c>)
 80003b6:	f001 fada 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	4891      	ldr	r0, [pc, #580]	; (8000604 <display7SEG+0x31c>)
 80003c0:	f001 fad5 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2120      	movs	r1, #32
 80003c8:	488e      	ldr	r0, [pc, #568]	; (8000604 <display7SEG+0x31c>)
 80003ca:	f001 fad0 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	488c      	ldr	r0, [pc, #560]	; (8000604 <display7SEG+0x31c>)
 80003d4:	f001 facb 	bl	800196e <HAL_GPIO_WritePin>
}
 80003d8:	e10f      	b.n	80005fa <display7SEG+0x312>
	else if (num==3){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d123      	bne.n	8000428 <display7SEG+0x140>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	4887      	ldr	r0, [pc, #540]	; (8000604 <display7SEG+0x31c>)
 80003e6:	f001 fac2 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2102      	movs	r1, #2
 80003ee:	4885      	ldr	r0, [pc, #532]	; (8000604 <display7SEG+0x31c>)
 80003f0:	f001 fabd 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2104      	movs	r1, #4
 80003f8:	4882      	ldr	r0, [pc, #520]	; (8000604 <display7SEG+0x31c>)
 80003fa:	f001 fab8 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	4880      	ldr	r0, [pc, #512]	; (8000604 <display7SEG+0x31c>)
 8000404:	f001 fab3 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	487d      	ldr	r0, [pc, #500]	; (8000604 <display7SEG+0x31c>)
 800040e:	f001 faae 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2120      	movs	r1, #32
 8000416:	487b      	ldr	r0, [pc, #492]	; (8000604 <display7SEG+0x31c>)
 8000418:	f001 faa9 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4878      	ldr	r0, [pc, #480]	; (8000604 <display7SEG+0x31c>)
 8000422:	f001 faa4 	bl	800196e <HAL_GPIO_WritePin>
}
 8000426:	e0e8      	b.n	80005fa <display7SEG+0x312>
	else if (num==4){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b04      	cmp	r3, #4
 800042c:	d123      	bne.n	8000476 <display7SEG+0x18e>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2101      	movs	r1, #1
 8000432:	4874      	ldr	r0, [pc, #464]	; (8000604 <display7SEG+0x31c>)
 8000434:	f001 fa9b 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2102      	movs	r1, #2
 800043c:	4871      	ldr	r0, [pc, #452]	; (8000604 <display7SEG+0x31c>)
 800043e:	f001 fa96 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2104      	movs	r1, #4
 8000446:	486f      	ldr	r0, [pc, #444]	; (8000604 <display7SEG+0x31c>)
 8000448:	f001 fa91 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2108      	movs	r1, #8
 8000450:	486c      	ldr	r0, [pc, #432]	; (8000604 <display7SEG+0x31c>)
 8000452:	f001 fa8c 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2110      	movs	r1, #16
 800045a:	486a      	ldr	r0, [pc, #424]	; (8000604 <display7SEG+0x31c>)
 800045c:	f001 fa87 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2120      	movs	r1, #32
 8000464:	4867      	ldr	r0, [pc, #412]	; (8000604 <display7SEG+0x31c>)
 8000466:	f001 fa82 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	4865      	ldr	r0, [pc, #404]	; (8000604 <display7SEG+0x31c>)
 8000470:	f001 fa7d 	bl	800196e <HAL_GPIO_WritePin>
}
 8000474:	e0c1      	b.n	80005fa <display7SEG+0x312>
	else if (num==5){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b05      	cmp	r3, #5
 800047a:	d123      	bne.n	80004c4 <display7SEG+0x1dc>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2101      	movs	r1, #1
 8000480:	4860      	ldr	r0, [pc, #384]	; (8000604 <display7SEG+0x31c>)
 8000482:	f001 fa74 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2102      	movs	r1, #2
 800048a:	485e      	ldr	r0, [pc, #376]	; (8000604 <display7SEG+0x31c>)
 800048c:	f001 fa6f 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2104      	movs	r1, #4
 8000494:	485b      	ldr	r0, [pc, #364]	; (8000604 <display7SEG+0x31c>)
 8000496:	f001 fa6a 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2108      	movs	r1, #8
 800049e:	4859      	ldr	r0, [pc, #356]	; (8000604 <display7SEG+0x31c>)
 80004a0:	f001 fa65 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2110      	movs	r1, #16
 80004a8:	4856      	ldr	r0, [pc, #344]	; (8000604 <display7SEG+0x31c>)
 80004aa:	f001 fa60 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2120      	movs	r1, #32
 80004b2:	4854      	ldr	r0, [pc, #336]	; (8000604 <display7SEG+0x31c>)
 80004b4:	f001 fa5b 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	4851      	ldr	r0, [pc, #324]	; (8000604 <display7SEG+0x31c>)
 80004be:	f001 fa56 	bl	800196e <HAL_GPIO_WritePin>
}
 80004c2:	e09a      	b.n	80005fa <display7SEG+0x312>
	else if (num==6){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d123      	bne.n	8000512 <display7SEG+0x22a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2101      	movs	r1, #1
 80004ce:	484d      	ldr	r0, [pc, #308]	; (8000604 <display7SEG+0x31c>)
 80004d0:	f001 fa4d 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2102      	movs	r1, #2
 80004d8:	484a      	ldr	r0, [pc, #296]	; (8000604 <display7SEG+0x31c>)
 80004da:	f001 fa48 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2104      	movs	r1, #4
 80004e2:	4848      	ldr	r0, [pc, #288]	; (8000604 <display7SEG+0x31c>)
 80004e4:	f001 fa43 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2108      	movs	r1, #8
 80004ec:	4845      	ldr	r0, [pc, #276]	; (8000604 <display7SEG+0x31c>)
 80004ee:	f001 fa3e 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	4843      	ldr	r0, [pc, #268]	; (8000604 <display7SEG+0x31c>)
 80004f8:	f001 fa39 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2120      	movs	r1, #32
 8000500:	4840      	ldr	r0, [pc, #256]	; (8000604 <display7SEG+0x31c>)
 8000502:	f001 fa34 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	483e      	ldr	r0, [pc, #248]	; (8000604 <display7SEG+0x31c>)
 800050c:	f001 fa2f 	bl	800196e <HAL_GPIO_WritePin>
}
 8000510:	e073      	b.n	80005fa <display7SEG+0x312>
	else if (num==7){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b07      	cmp	r3, #7
 8000516:	d123      	bne.n	8000560 <display7SEG+0x278>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	4839      	ldr	r0, [pc, #228]	; (8000604 <display7SEG+0x31c>)
 800051e:	f001 fa26 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2102      	movs	r1, #2
 8000526:	4837      	ldr	r0, [pc, #220]	; (8000604 <display7SEG+0x31c>)
 8000528:	f001 fa21 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2104      	movs	r1, #4
 8000530:	4834      	ldr	r0, [pc, #208]	; (8000604 <display7SEG+0x31c>)
 8000532:	f001 fa1c 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2108      	movs	r1, #8
 800053a:	4832      	ldr	r0, [pc, #200]	; (8000604 <display7SEG+0x31c>)
 800053c:	f001 fa17 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	482f      	ldr	r0, [pc, #188]	; (8000604 <display7SEG+0x31c>)
 8000546:	f001 fa12 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2120      	movs	r1, #32
 800054e:	482d      	ldr	r0, [pc, #180]	; (8000604 <display7SEG+0x31c>)
 8000550:	f001 fa0d 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	482a      	ldr	r0, [pc, #168]	; (8000604 <display7SEG+0x31c>)
 800055a:	f001 fa08 	bl	800196e <HAL_GPIO_WritePin>
}
 800055e:	e04c      	b.n	80005fa <display7SEG+0x312>
	else if (num==8){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b08      	cmp	r3, #8
 8000564:	d123      	bne.n	80005ae <display7SEG+0x2c6>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	4826      	ldr	r0, [pc, #152]	; (8000604 <display7SEG+0x31c>)
 800056c:	f001 f9ff 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <display7SEG+0x31c>)
 8000576:	f001 f9fa 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	4821      	ldr	r0, [pc, #132]	; (8000604 <display7SEG+0x31c>)
 8000580:	f001 f9f5 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	481e      	ldr	r0, [pc, #120]	; (8000604 <display7SEG+0x31c>)
 800058a:	f001 f9f0 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2110      	movs	r1, #16
 8000592:	481c      	ldr	r0, [pc, #112]	; (8000604 <display7SEG+0x31c>)
 8000594:	f001 f9eb 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <display7SEG+0x31c>)
 800059e:	f001 f9e6 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <display7SEG+0x31c>)
 80005a8:	f001 f9e1 	bl	800196e <HAL_GPIO_WritePin>
}
 80005ac:	e025      	b.n	80005fa <display7SEG+0x312>
	else if (num==9){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b09      	cmp	r3, #9
 80005b2:	d122      	bne.n	80005fa <display7SEG+0x312>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <display7SEG+0x31c>)
 80005ba:	f001 f9d8 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <display7SEG+0x31c>)
 80005c4:	f001 f9d3 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <display7SEG+0x31c>)
 80005ce:	f001 f9ce 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <display7SEG+0x31c>)
 80005d8:	f001 f9c9 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2110      	movs	r1, #16
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <display7SEG+0x31c>)
 80005e2:	f001 f9c4 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <display7SEG+0x31c>)
 80005ec:	f001 f9bf 	bl	800196e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <display7SEG+0x31c>)
 80005f6:	f001 f9ba 	bl	800196e <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010c00 	.word	0x40010c00

08000608 <displaySignal>:

void displaySignal(int index){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	clearSignal();
 8000610:	f7ff fe4c 	bl	80002ac <clearSignal>
	display7SEG(led_buffer[index]);
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <displaySignal+0x7c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe63 	bl	80002e8 <display7SEG>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d827      	bhi.n	8000678 <displaySignal+0x70>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <displaySignal+0x28>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	08000641 	.word	0x08000641
 8000634:	0800064f 	.word	0x0800064f
 8000638:	0800065d 	.word	0x0800065d
 800063c:	0800066b 	.word	0x0800066b
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <displaySignal+0x80>)
 8000648:	f001 f991 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800064c:	e015      	b.n	800067a <displaySignal+0x72>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <displaySignal+0x80>)
 8000656:	f001 f98a 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800065a:	e00e      	b.n	800067a <displaySignal+0x72>
	case 2:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <displaySignal+0x80>)
 8000664:	f001 f983 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000668:	e007      	b.n	800067a <displaySignal+0x72>
	case 3:
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <displaySignal+0x80>)
 8000672:	f001 f97c 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000676:	e000      	b.n	800067a <displaySignal+0x72>
	default:
		break;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000088 	.word	0x20000088
 8000688:	40010800 	.word	0x40010800

0800068c <fsm_automatic>:
 */

#include "fsm_automatic.h"


void fsm_automatic(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch(led_status){
 8000690:	4b91      	ldr	r3, [pc, #580]	; (80008d8 <fsm_automatic+0x24c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b04      	cmp	r3, #4
 8000696:	f200 80e3 	bhi.w	8000860 <fsm_automatic+0x1d4>
 800069a:	a201      	add	r2, pc, #4	; (adr r2, 80006a0 <fsm_automatic+0x14>)
 800069c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a0:	080006b5 	.word	0x080006b5
 80006a4:	080006d7 	.word	0x080006d7
 80006a8:	08000733 	.word	0x08000733
 80006ac:	0800079d 	.word	0x0800079d
 80006b0:	080007f7 	.word	0x080007f7
	case INIT:
		//TODO
		offALL();
 80006b4:	f000 fb28 	bl	8000d08 <offALL>

		led_status = RED_GREEN;
 80006b8:	4b87      	ldr	r3, [pc, #540]	; (80008d8 <fsm_automatic+0x24c>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
		setTimer1(g_val*100);
 80006be:	4b87      	ldr	r3, [pc, #540]	; (80008dc <fsm_automatic+0x250>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2264      	movs	r2, #100	; 0x64
 80006c4:	fb02 f303 	mul.w	r3, r2, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 fca5 	bl	8001018 <setTimer1>
		setTimer2(100);
 80006ce:	2064      	movs	r0, #100	; 0x64
 80006d0:	f000 fcb6 	bl	8001040 <setTimer2>
		break;
 80006d4:	e0cd      	b.n	8000872 <fsm_automatic+0x1e6>
	case RED_GREEN:
		//TODO
		onRED1();
 80006d6:	f000 fa93 	bl	8000c00 <onRED1>
		onGREEN2();
 80006da:	f000 faff 	bl	8000cdc <onGREEN2>

		//decrease
		if (timer2_flag == 1){
 80006de:	4b80      	ldr	r3, [pc, #512]	; (80008e0 <fsm_automatic+0x254>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d114      	bne.n	8000710 <fsm_automatic+0x84>
			setTimer2(100);
 80006e6:	2064      	movs	r0, #100	; 0x64
 80006e8:	f000 fcaa 	bl	8001040 <setTimer2>
			timerRoad1--;
 80006ec:	4b7d      	ldr	r3, [pc, #500]	; (80008e4 <fsm_automatic+0x258>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	4a7c      	ldr	r2, [pc, #496]	; (80008e4 <fsm_automatic+0x258>)
 80006f4:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80006f6:	4b7c      	ldr	r3, [pc, #496]	; (80008e8 <fsm_automatic+0x25c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	4a7a      	ldr	r2, [pc, #488]	; (80008e8 <fsm_automatic+0x25c>)
 80006fe:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = y_val;
 8000700:	4b79      	ldr	r3, [pc, #484]	; (80008e8 <fsm_automatic+0x25c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	dc03      	bgt.n	8000710 <fsm_automatic+0x84>
 8000708:	4b78      	ldr	r3, [pc, #480]	; (80008ec <fsm_automatic+0x260>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a76      	ldr	r2, [pc, #472]	; (80008e8 <fsm_automatic+0x25c>)
 800070e:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 8000710:	4b77      	ldr	r3, [pc, #476]	; (80008f0 <fsm_automatic+0x264>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	f040 80a5 	bne.w	8000864 <fsm_automatic+0x1d8>
			setTimer1(y_val*100);
 800071a:	4b74      	ldr	r3, [pc, #464]	; (80008ec <fsm_automatic+0x260>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2264      	movs	r2, #100	; 0x64
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fc77 	bl	8001018 <setTimer1>
			led_status = RED_YELLOW;
 800072a:	4b6b      	ldr	r3, [pc, #428]	; (80008d8 <fsm_automatic+0x24c>)
 800072c:	2202      	movs	r2, #2
 800072e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000730:	e098      	b.n	8000864 <fsm_automatic+0x1d8>
	case RED_YELLOW:
		//TODO
		onRED1();
 8000732:	f000 fa65 	bl	8000c00 <onRED1>
		onYELLOW2();
 8000736:	f000 fabb 	bl	8000cb0 <onYELLOW2>

		//decrease
		if (timer2_flag == 1){
 800073a:	4b69      	ldr	r3, [pc, #420]	; (80008e0 <fsm_automatic+0x254>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b01      	cmp	r3, #1
 8000740:	d11c      	bne.n	800077c <fsm_automatic+0xf0>
			setTimer2(100);
 8000742:	2064      	movs	r0, #100	; 0x64
 8000744:	f000 fc7c 	bl	8001040 <setTimer2>
			timerRoad1--;
 8000748:	4b66      	ldr	r3, [pc, #408]	; (80008e4 <fsm_automatic+0x258>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4a65      	ldr	r2, [pc, #404]	; (80008e4 <fsm_automatic+0x258>)
 8000750:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = g_val;
 8000752:	4b64      	ldr	r3, [pc, #400]	; (80008e4 <fsm_automatic+0x258>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dc03      	bgt.n	8000762 <fsm_automatic+0xd6>
 800075a:	4b60      	ldr	r3, [pc, #384]	; (80008dc <fsm_automatic+0x250>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a61      	ldr	r2, [pc, #388]	; (80008e4 <fsm_automatic+0x258>)
 8000760:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000762:	4b61      	ldr	r3, [pc, #388]	; (80008e8 <fsm_automatic+0x25c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	3b01      	subs	r3, #1
 8000768:	4a5f      	ldr	r2, [pc, #380]	; (80008e8 <fsm_automatic+0x25c>)
 800076a:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = r_val;
 800076c:	4b5e      	ldr	r3, [pc, #376]	; (80008e8 <fsm_automatic+0x25c>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dc03      	bgt.n	800077c <fsm_automatic+0xf0>
 8000774:	4b5f      	ldr	r3, [pc, #380]	; (80008f4 <fsm_automatic+0x268>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a5b      	ldr	r2, [pc, #364]	; (80008e8 <fsm_automatic+0x25c>)
 800077a:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 800077c:	4b5c      	ldr	r3, [pc, #368]	; (80008f0 <fsm_automatic+0x264>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b01      	cmp	r3, #1
 8000782:	d171      	bne.n	8000868 <fsm_automatic+0x1dc>
			setTimer1(g_val*100);
 8000784:	4b55      	ldr	r3, [pc, #340]	; (80008dc <fsm_automatic+0x250>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2264      	movs	r2, #100	; 0x64
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fc42 	bl	8001018 <setTimer1>
			led_status = GREEN_RED;
 8000794:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <fsm_automatic+0x24c>)
 8000796:	2203      	movs	r2, #3
 8000798:	601a      	str	r2, [r3, #0]
		}
		break;
 800079a:	e065      	b.n	8000868 <fsm_automatic+0x1dc>
	case GREEN_RED:
		onGREEN1();
 800079c:	f000 fa5c 	bl	8000c58 <onGREEN1>
		onRED2();
 80007a0:	f000 fa70 	bl	8000c84 <onRED2>

		//decrease
		if (timer2_flag == 1){
 80007a4:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <fsm_automatic+0x254>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d114      	bne.n	80007d6 <fsm_automatic+0x14a>
			setTimer2(100);
 80007ac:	2064      	movs	r0, #100	; 0x64
 80007ae:	f000 fc47 	bl	8001040 <setTimer2>
			timerRoad1--;
 80007b2:	4b4c      	ldr	r3, [pc, #304]	; (80008e4 <fsm_automatic+0x258>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	3b01      	subs	r3, #1
 80007b8:	4a4a      	ldr	r2, [pc, #296]	; (80008e4 <fsm_automatic+0x258>)
 80007ba:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = y_val;
 80007bc:	4b49      	ldr	r3, [pc, #292]	; (80008e4 <fsm_automatic+0x258>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	dc03      	bgt.n	80007cc <fsm_automatic+0x140>
 80007c4:	4b49      	ldr	r3, [pc, #292]	; (80008ec <fsm_automatic+0x260>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a46      	ldr	r2, [pc, #280]	; (80008e4 <fsm_automatic+0x258>)
 80007ca:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80007cc:	4b46      	ldr	r3, [pc, #280]	; (80008e8 <fsm_automatic+0x25c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3b01      	subs	r3, #1
 80007d2:	4a45      	ldr	r2, [pc, #276]	; (80008e8 <fsm_automatic+0x25c>)
 80007d4:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 80007d6:	4b46      	ldr	r3, [pc, #280]	; (80008f0 <fsm_automatic+0x264>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d146      	bne.n	800086c <fsm_automatic+0x1e0>
			setTimer1(y_val*100);
 80007de:	4b43      	ldr	r3, [pc, #268]	; (80008ec <fsm_automatic+0x260>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2264      	movs	r2, #100	; 0x64
 80007e4:	fb02 f303 	mul.w	r3, r2, r3
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fc15 	bl	8001018 <setTimer1>
			led_status = YELLOW_RED;
 80007ee:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <fsm_automatic+0x24c>)
 80007f0:	2204      	movs	r2, #4
 80007f2:	601a      	str	r2, [r3, #0]
		}
		break;
 80007f4:	e03a      	b.n	800086c <fsm_automatic+0x1e0>
	case YELLOW_RED:
		onYELLOW1();
 80007f6:	f000 fa19 	bl	8000c2c <onYELLOW1>
		onRED2();
 80007fa:	f000 fa43 	bl	8000c84 <onRED2>

		//decrease
		if (timer2_flag == 1){
 80007fe:	4b38      	ldr	r3, [pc, #224]	; (80008e0 <fsm_automatic+0x254>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d11c      	bne.n	8000840 <fsm_automatic+0x1b4>
			setTimer2(100);
 8000806:	2064      	movs	r0, #100	; 0x64
 8000808:	f000 fc1a 	bl	8001040 <setTimer2>
			timerRoad1--;
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <fsm_automatic+0x258>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	3b01      	subs	r3, #1
 8000812:	4a34      	ldr	r2, [pc, #208]	; (80008e4 <fsm_automatic+0x258>)
 8000814:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = r_val;
 8000816:	4b33      	ldr	r3, [pc, #204]	; (80008e4 <fsm_automatic+0x258>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	dc03      	bgt.n	8000826 <fsm_automatic+0x19a>
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <fsm_automatic+0x268>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a30      	ldr	r2, [pc, #192]	; (80008e4 <fsm_automatic+0x258>)
 8000824:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <fsm_automatic+0x25c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3b01      	subs	r3, #1
 800082c:	4a2e      	ldr	r2, [pc, #184]	; (80008e8 <fsm_automatic+0x25c>)
 800082e:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = g_val;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <fsm_automatic+0x25c>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	dc03      	bgt.n	8000840 <fsm_automatic+0x1b4>
 8000838:	4b28      	ldr	r3, [pc, #160]	; (80008dc <fsm_automatic+0x250>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	4a2a      	ldr	r2, [pc, #168]	; (80008e8 <fsm_automatic+0x25c>)
 800083e:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 8000840:	4b2b      	ldr	r3, [pc, #172]	; (80008f0 <fsm_automatic+0x264>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d113      	bne.n	8000870 <fsm_automatic+0x1e4>
			setTimer1(g_val*100);
 8000848:	4b24      	ldr	r3, [pc, #144]	; (80008dc <fsm_automatic+0x250>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	fb02 f303 	mul.w	r3, r2, r3
 8000852:	4618      	mov	r0, r3
 8000854:	f000 fbe0 	bl	8001018 <setTimer1>
			led_status = RED_GREEN;
 8000858:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <fsm_automatic+0x24c>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
		}
		break;
 800085e:	e007      	b.n	8000870 <fsm_automatic+0x1e4>
	default:
		break;
 8000860:	bf00      	nop
 8000862:	e006      	b.n	8000872 <fsm_automatic+0x1e6>
		break;
 8000864:	bf00      	nop
 8000866:	e004      	b.n	8000872 <fsm_automatic+0x1e6>
		break;
 8000868:	bf00      	nop
 800086a:	e002      	b.n	8000872 <fsm_automatic+0x1e6>
		break;
 800086c:	bf00      	nop
 800086e:	e000      	b.n	8000872 <fsm_automatic+0x1e6>
		break;
 8000870:	bf00      	nop
	}
	//check mode
	if (isButtonPressed(0) == 1 && (led_status == RED_GREEN || led_status == RED_YELLOW || led_status == GREEN_RED || led_status == YELLOW_RED)){
 8000872:	2000      	movs	r0, #0
 8000874:	f7ff fc6a 	bl	800014c <isButtonPressed>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d12a      	bne.n	80008d4 <fsm_automatic+0x248>
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <fsm_automatic+0x24c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d00b      	beq.n	800089e <fsm_automatic+0x212>
 8000886:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <fsm_automatic+0x24c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d007      	beq.n	800089e <fsm_automatic+0x212>
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <fsm_automatic+0x24c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d003      	beq.n	800089e <fsm_automatic+0x212>
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <fsm_automatic+0x24c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b04      	cmp	r3, #4
 800089c:	d11a      	bne.n	80008d4 <fsm_automatic+0x248>
		offALL();
 800089e:	f000 fa33 	bl	8000d08 <offALL>
		led_status = RED_MAN;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <fsm_automatic+0x24c>)
 80008a4:	220c      	movs	r2, #12
 80008a6:	601a      	str	r2, [r3, #0]
		r_inc = r_val;
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <fsm_automatic+0x268>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a12      	ldr	r2, [pc, #72]	; (80008f8 <fsm_automatic+0x26c>)
 80008ae:	6013      	str	r3, [r2, #0]
		y_inc = y_val;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <fsm_automatic+0x260>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a11      	ldr	r2, [pc, #68]	; (80008fc <fsm_automatic+0x270>)
 80008b6:	6013      	str	r3, [r2, #0]
		g_inc = g_val;
 80008b8:	4b08      	ldr	r3, [pc, #32]	; (80008dc <fsm_automatic+0x250>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a10      	ldr	r2, [pc, #64]	; (8000900 <fsm_automatic+0x274>)
 80008be:	6013      	str	r3, [r2, #0]
		setTimer5(1); // blinking led
 80008c0:	2001      	movs	r0, #1
 80008c2:	f000 fbf9 	bl	80010b8 <setTimer5>

		timerRoad1 = r_val;
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <fsm_automatic+0x268>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <fsm_automatic+0x258>)
 80008cc:	6013      	str	r3, [r2, #0]
		timerRoad2 = 2;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <fsm_automatic+0x25c>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	601a      	str	r2, [r3, #0]
	}
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000084 	.word	0x20000084
 80008dc:	2000004c 	.word	0x2000004c
 80008e0:	200000c0 	.word	0x200000c0
 80008e4:	2000009c 	.word	0x2000009c
 80008e8:	200000a0 	.word	0x200000a0
 80008ec:	20000048 	.word	0x20000048
 80008f0:	200000b8 	.word	0x200000b8
 80008f4:	20000044 	.word	0x20000044
 80008f8:	200000a4 	.word	0x200000a4
 80008fc:	200000ac 	.word	0x200000ac
 8000900:	200000a8 	.word	0x200000a8

08000904 <fsm_manual_run>:
 */


#include"fsm_manual.h"

void fsm_manual_run(){
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	switch(led_status){
 8000908:	4b91      	ldr	r3, [pc, #580]	; (8000b50 <fsm_manual_run+0x24c>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b0e      	cmp	r3, #14
 800090e:	d053      	beq.n	80009b8 <fsm_manual_run+0xb4>
 8000910:	2b0e      	cmp	r3, #14
 8000912:	f300 810a 	bgt.w	8000b2a <fsm_manual_run+0x226>
 8000916:	2b0c      	cmp	r3, #12
 8000918:	d003      	beq.n	8000922 <fsm_manual_run+0x1e>
 800091a:	2b0d      	cmp	r3, #13
 800091c:	f000 8098 	beq.w	8000a50 <fsm_manual_run+0x14c>
			y_val=r_val-g_val;
		}
		break;

	default:
		break;
 8000920:	e103      	b.n	8000b2a <fsm_manual_run+0x226>
		if (timer5_flag == 1){
 8000922:	4b8c      	ldr	r3, [pc, #560]	; (8000b54 <fsm_manual_run+0x250>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d110      	bne.n	800094c <fsm_manual_run+0x48>
			setTimer5(25);
 800092a:	2019      	movs	r0, #25
 800092c:	f000 fbc4 	bl	80010b8 <setTimer5>
			if (toogleFlag == 0){
 8000930:	4b89      	ldr	r3, [pc, #548]	; (8000b58 <fsm_manual_run+0x254>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d107      	bne.n	8000948 <fsm_manual_run+0x44>
				toogleFlag = 1;
 8000938:	4b87      	ldr	r3, [pc, #540]	; (8000b58 <fsm_manual_run+0x254>)
 800093a:	2201      	movs	r2, #1
 800093c:	601a      	str	r2, [r3, #0]
				onRED1();
 800093e:	f000 f95f 	bl	8000c00 <onRED1>
				onRED2();
 8000942:	f000 f99f 	bl	8000c84 <onRED2>
 8000946:	e001      	b.n	800094c <fsm_manual_run+0x48>
				offALL();
 8000948:	f000 f9de 	bl	8000d08 <offALL>
		if (isButtonPressed(1) == 1){
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fbfd 	bl	800014c <isButtonPressed>
 8000952:	4603      	mov	r3, r0
 8000954:	2b01      	cmp	r3, #1
 8000956:	d110      	bne.n	800097a <fsm_manual_run+0x76>
			r_inc++;
 8000958:	4b80      	ldr	r3, [pc, #512]	; (8000b5c <fsm_manual_run+0x258>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	4a7f      	ldr	r2, [pc, #508]	; (8000b5c <fsm_manual_run+0x258>)
 8000960:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000962:	4b7f      	ldr	r3, [pc, #508]	; (8000b60 <fsm_manual_run+0x25c>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a7d      	ldr	r2, [pc, #500]	; (8000b60 <fsm_manual_run+0x25c>)
 800096a:	6013      	str	r3, [r2, #0]
			if (r_inc >= 100) r_inc=2;
 800096c:	4b7b      	ldr	r3, [pc, #492]	; (8000b5c <fsm_manual_run+0x258>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b63      	cmp	r3, #99	; 0x63
 8000972:	dd02      	ble.n	800097a <fsm_manual_run+0x76>
 8000974:	4b79      	ldr	r3, [pc, #484]	; (8000b5c <fsm_manual_run+0x258>)
 8000976:	2202      	movs	r2, #2
 8000978:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 800097a:	2000      	movs	r0, #0
 800097c:	f7ff fbe6 	bl	800014c <isButtonPressed>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d10c      	bne.n	80009a0 <fsm_manual_run+0x9c>
			setTimer5(1);
 8000986:	2001      	movs	r0, #1
 8000988:	f000 fb96 	bl	80010b8 <setTimer5>
			led_status = YELLOW_MAN;
 800098c:	4b70      	ldr	r3, [pc, #448]	; (8000b50 <fsm_manual_run+0x24c>)
 800098e:	220e      	movs	r2, #14
 8000990:	601a      	str	r2, [r3, #0]
			timerRoad1 = y_val;
 8000992:	4b74      	ldr	r3, [pc, #464]	; (8000b64 <fsm_manual_run+0x260>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a72      	ldr	r2, [pc, #456]	; (8000b60 <fsm_manual_run+0x25c>)
 8000998:	6013      	str	r3, [r2, #0]
			timerRoad2 = 3;
 800099a:	4b73      	ldr	r3, [pc, #460]	; (8000b68 <fsm_manual_run+0x264>)
 800099c:	2203      	movs	r2, #3
 800099e:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 80009a0:	2002      	movs	r0, #2
 80009a2:	f7ff fbd3 	bl	800014c <isButtonPressed>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	f040 80c0 	bne.w	8000b2e <fsm_manual_run+0x22a>
			r_val=r_inc;
 80009ae:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <fsm_manual_run+0x258>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a6e      	ldr	r2, [pc, #440]	; (8000b6c <fsm_manual_run+0x268>)
 80009b4:	6013      	str	r3, [r2, #0]
		break;
 80009b6:	e0ba      	b.n	8000b2e <fsm_manual_run+0x22a>
		if (timer5_flag == 1){
 80009b8:	4b66      	ldr	r3, [pc, #408]	; (8000b54 <fsm_manual_run+0x250>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d110      	bne.n	80009e2 <fsm_manual_run+0xde>
			setTimer5(25);
 80009c0:	2019      	movs	r0, #25
 80009c2:	f000 fb79 	bl	80010b8 <setTimer5>
			if (toogleFlag == 0){
 80009c6:	4b64      	ldr	r3, [pc, #400]	; (8000b58 <fsm_manual_run+0x254>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d107      	bne.n	80009de <fsm_manual_run+0xda>
				toogleFlag = 1;
 80009ce:	4b62      	ldr	r3, [pc, #392]	; (8000b58 <fsm_manual_run+0x254>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
				onYELLOW1();
 80009d4:	f000 f92a 	bl	8000c2c <onYELLOW1>
				onYELLOW2();
 80009d8:	f000 f96a 	bl	8000cb0 <onYELLOW2>
 80009dc:	e001      	b.n	80009e2 <fsm_manual_run+0xde>
				offALL();
 80009de:	f000 f993 	bl	8000d08 <offALL>
		if (isButtonPressed(1) == 1){
 80009e2:	2001      	movs	r0, #1
 80009e4:	f7ff fbb2 	bl	800014c <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d112      	bne.n	8000a14 <fsm_manual_run+0x110>
			y_inc++;
 80009ee:	4b60      	ldr	r3, [pc, #384]	; (8000b70 <fsm_manual_run+0x26c>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	3301      	adds	r3, #1
 80009f4:	4a5e      	ldr	r2, [pc, #376]	; (8000b70 <fsm_manual_run+0x26c>)
 80009f6:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 80009f8:	4b59      	ldr	r3, [pc, #356]	; (8000b60 <fsm_manual_run+0x25c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	3301      	adds	r3, #1
 80009fe:	4a58      	ldr	r2, [pc, #352]	; (8000b60 <fsm_manual_run+0x25c>)
 8000a00:	6013      	str	r3, [r2, #0]
			if (y_inc >= r_val) y_inc=1;
 8000a02:	4b5b      	ldr	r3, [pc, #364]	; (8000b70 <fsm_manual_run+0x26c>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	4b59      	ldr	r3, [pc, #356]	; (8000b6c <fsm_manual_run+0x268>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	db02      	blt.n	8000a14 <fsm_manual_run+0x110>
 8000a0e:	4b58      	ldr	r3, [pc, #352]	; (8000b70 <fsm_manual_run+0x26c>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff fb99 	bl	800014c <isButtonPressed>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10c      	bne.n	8000a3a <fsm_manual_run+0x136>
			setTimer5(1);
 8000a20:	2001      	movs	r0, #1
 8000a22:	f000 fb49 	bl	80010b8 <setTimer5>
			led_status = GREEN_MAN;
 8000a26:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <fsm_manual_run+0x24c>)
 8000a28:	220d      	movs	r2, #13
 8000a2a:	601a      	str	r2, [r3, #0]
			timerRoad1 = g_val;
 8000a2c:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <fsm_manual_run+0x270>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a4b      	ldr	r2, [pc, #300]	; (8000b60 <fsm_manual_run+0x25c>)
 8000a32:	6013      	str	r3, [r2, #0]
			timerRoad2 = 4;
 8000a34:	4b4c      	ldr	r3, [pc, #304]	; (8000b68 <fsm_manual_run+0x264>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 8000a3a:	2002      	movs	r0, #2
 8000a3c:	f7ff fb86 	bl	800014c <isButtonPressed>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d175      	bne.n	8000b32 <fsm_manual_run+0x22e>
			y_val=y_inc;
 8000a46:	4b4a      	ldr	r3, [pc, #296]	; (8000b70 <fsm_manual_run+0x26c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a46      	ldr	r2, [pc, #280]	; (8000b64 <fsm_manual_run+0x260>)
 8000a4c:	6013      	str	r3, [r2, #0]
		break;
 8000a4e:	e070      	b.n	8000b32 <fsm_manual_run+0x22e>
		if (timer5_flag == 1){
 8000a50:	4b40      	ldr	r3, [pc, #256]	; (8000b54 <fsm_manual_run+0x250>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d110      	bne.n	8000a7a <fsm_manual_run+0x176>
			setTimer5(25);
 8000a58:	2019      	movs	r0, #25
 8000a5a:	f000 fb2d 	bl	80010b8 <setTimer5>
			if (toogleFlag == 0){
 8000a5e:	4b3e      	ldr	r3, [pc, #248]	; (8000b58 <fsm_manual_run+0x254>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d107      	bne.n	8000a76 <fsm_manual_run+0x172>
				toogleFlag = 1;
 8000a66:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <fsm_manual_run+0x254>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	601a      	str	r2, [r3, #0]
				onGREEN1();
 8000a6c:	f000 f8f4 	bl	8000c58 <onGREEN1>
				onGREEN2();
 8000a70:	f000 f934 	bl	8000cdc <onGREEN2>
 8000a74:	e001      	b.n	8000a7a <fsm_manual_run+0x176>
				offALL();
 8000a76:	f000 f947 	bl	8000d08 <offALL>
		if (isButtonPressed(1) == 1){
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	f7ff fb66 	bl	800014c <isButtonPressed>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d112      	bne.n	8000aac <fsm_manual_run+0x1a8>
			g_inc++;
 8000a86:	4b3c      	ldr	r3, [pc, #240]	; (8000b78 <fsm_manual_run+0x274>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a3a      	ldr	r2, [pc, #232]	; (8000b78 <fsm_manual_run+0x274>)
 8000a8e:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000a90:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <fsm_manual_run+0x25c>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	3301      	adds	r3, #1
 8000a96:	4a32      	ldr	r2, [pc, #200]	; (8000b60 <fsm_manual_run+0x25c>)
 8000a98:	6013      	str	r3, [r2, #0]
			if (g_inc >= r_val) g_inc=1;
 8000a9a:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <fsm_manual_run+0x274>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <fsm_manual_run+0x268>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	db02      	blt.n	8000aac <fsm_manual_run+0x1a8>
 8000aa6:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <fsm_manual_run+0x274>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 8000aac:	2000      	movs	r0, #0
 8000aae:	f7ff fb4d 	bl	800014c <isButtonPressed>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d126      	bne.n	8000b06 <fsm_manual_run+0x202>
			led_status = RED_GREEN;
 8000ab8:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <fsm_manual_run+0x24c>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
			g_val = r_val-y_val;
 8000abe:	4b2b      	ldr	r3, [pc, #172]	; (8000b6c <fsm_manual_run+0x268>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <fsm_manual_run+0x260>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	4a2a      	ldr	r2, [pc, #168]	; (8000b74 <fsm_manual_run+0x270>)
 8000aca:	6013      	str	r3, [r2, #0]
			timerRoad1 = r_val;
 8000acc:	4b27      	ldr	r3, [pc, #156]	; (8000b6c <fsm_manual_run+0x268>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a23      	ldr	r2, [pc, #140]	; (8000b60 <fsm_manual_run+0x25c>)
 8000ad2:	6013      	str	r3, [r2, #0]
			timerRoad2 = g_val;
 8000ad4:	4b27      	ldr	r3, [pc, #156]	; (8000b74 <fsm_manual_run+0x270>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <fsm_manual_run+0x264>)
 8000ada:	6013      	str	r3, [r2, #0]
			updateLedBuffer();
 8000adc:	f000 f850 	bl	8000b80 <updateLedBuffer>
			setTimer1(g_val*100);
 8000ae0:	4b24      	ldr	r3, [pc, #144]	; (8000b74 <fsm_manual_run+0x270>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2264      	movs	r2, #100	; 0x64
 8000ae6:	fb02 f303 	mul.w	r3, r2, r3
 8000aea:	4618      	mov	r0, r3
 8000aec:	f000 fa94 	bl	8001018 <setTimer1>
			setTimer2(100);
 8000af0:	2064      	movs	r0, #100	; 0x64
 8000af2:	f000 faa5 	bl	8001040 <setTimer2>
			setTimer4(1);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f000 faca 	bl	8001090 <setTimer4>
			index_led=0;
 8000afc:	4b1f      	ldr	r3, [pc, #124]	; (8000b7c <fsm_manual_run+0x278>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
			clearSignal();
 8000b02:	f7ff fbd3 	bl	80002ac <clearSignal>
		if (isButtonPressed(2) == 1){
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff fb20 	bl	800014c <isButtonPressed>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d111      	bne.n	8000b36 <fsm_manual_run+0x232>
			g_val=g_inc;
 8000b12:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <fsm_manual_run+0x274>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <fsm_manual_run+0x270>)
 8000b18:	6013      	str	r3, [r2, #0]
			y_val=r_val-g_val;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <fsm_manual_run+0x268>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <fsm_manual_run+0x270>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	1ad3      	subs	r3, r2, r3
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <fsm_manual_run+0x260>)
 8000b26:	6013      	str	r3, [r2, #0]
		break;
 8000b28:	e005      	b.n	8000b36 <fsm_manual_run+0x232>
		break;
 8000b2a:	bf00      	nop
 8000b2c:	e004      	b.n	8000b38 <fsm_manual_run+0x234>
		break;
 8000b2e:	bf00      	nop
 8000b30:	e002      	b.n	8000b38 <fsm_manual_run+0x234>
		break;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <fsm_manual_run+0x234>
		break;
 8000b36:	bf00      	nop
	}
	if (isButtonPressed(2) == 1){
 8000b38:	2002      	movs	r0, #2
 8000b3a:	f7ff fb07 	bl	800014c <isButtonPressed>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d103      	bne.n	8000b4c <fsm_manual_run+0x248>
		timerRoad1 = r_val;
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <fsm_manual_run+0x268>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a05      	ldr	r2, [pc, #20]	; (8000b60 <fsm_manual_run+0x25c>)
 8000b4a:	6013      	str	r3, [r2, #0]
	}
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000084 	.word	0x20000084
 8000b54:	200000d8 	.word	0x200000d8
 8000b58:	200000b0 	.word	0x200000b0
 8000b5c:	200000a4 	.word	0x200000a4
 8000b60:	2000009c 	.word	0x2000009c
 8000b64:	20000048 	.word	0x20000048
 8000b68:	200000a0 	.word	0x200000a0
 8000b6c:	20000044 	.word	0x20000044
 8000b70:	200000ac 	.word	0x200000ac
 8000b74:	2000004c 	.word	0x2000004c
 8000b78:	200000a8 	.word	0x200000a8
 8000b7c:	20000098 	.word	0x20000098

08000b80 <updateLedBuffer>:
int g_inc=0;
int y_inc=0;

int toogleFlag=0;

void updateLedBuffer(){
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	led_buffer[0] = timerRoad1 / 10;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <updateLedBuffer+0x70>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <updateLedBuffer+0x74>)
 8000b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8e:	1092      	asrs	r2, r2, #2
 8000b90:	17db      	asrs	r3, r3, #31
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <updateLedBuffer+0x78>)
 8000b96:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timerRoad1 % 10;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <updateLedBuffer+0x70>)
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <updateLedBuffer+0x74>)
 8000b9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba2:	109a      	asrs	r2, r3, #2
 8000ba4:	17cb      	asrs	r3, r1, #31
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	1aca      	subs	r2, r1, r3
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <updateLedBuffer+0x78>)
 8000bb4:	605a      	str	r2, [r3, #4]
	led_buffer[2] = timerRoad2 / 10;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <updateLedBuffer+0x7c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <updateLedBuffer+0x74>)
 8000bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc0:	1092      	asrs	r2, r2, #2
 8000bc2:	17db      	asrs	r3, r3, #31
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <updateLedBuffer+0x78>)
 8000bc8:	6093      	str	r3, [r2, #8]
	led_buffer[3] = timerRoad2 % 10;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <updateLedBuffer+0x7c>)
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <updateLedBuffer+0x74>)
 8000bd0:	fb83 2301 	smull	r2, r3, r3, r1
 8000bd4:	109a      	asrs	r2, r3, #2
 8000bd6:	17cb      	asrs	r3, r1, #31
 8000bd8:	1ad2      	subs	r2, r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	1aca      	subs	r2, r1, r3
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <updateLedBuffer+0x78>)
 8000be6:	60da      	str	r2, [r3, #12]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	2000009c 	.word	0x2000009c
 8000bf4:	66666667 	.word	0x66666667
 8000bf8:	20000088 	.word	0x20000088
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <onRED1>:
 */


#include "led.h"

void onRED1(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2104      	movs	r1, #4
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <onRED1+0x28>)
 8000c0a:	f000 feb0 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2108      	movs	r1, #8
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <onRED1+0x28>)
 8000c14:	f000 feab 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	4802      	ldr	r0, [pc, #8]	; (8000c28 <onRED1+0x28>)
 8000c1e:	f000 fea6 	bl	800196e <HAL_GPIO_WritePin>
};
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40010800 	.word	0x40010800

08000c2c <onYELLOW1>:
void onYELLOW1(){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	2104      	movs	r1, #4
 8000c34:	4807      	ldr	r0, [pc, #28]	; (8000c54 <onYELLOW1+0x28>)
 8000c36:	f000 fe9a 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2108      	movs	r1, #8
 8000c3e:	4805      	ldr	r0, [pc, #20]	; (8000c54 <onYELLOW1+0x28>)
 8000c40:	f000 fe95 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000c44:	2200      	movs	r2, #0
 8000c46:	2110      	movs	r1, #16
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <onYELLOW1+0x28>)
 8000c4a:	f000 fe90 	bl	800196e <HAL_GPIO_WritePin>
};
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40010800 	.word	0x40010800

08000c58 <onGREEN1>:
void onGREEN1(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2104      	movs	r1, #4
 8000c60:	4807      	ldr	r0, [pc, #28]	; (8000c80 <onGREEN1+0x28>)
 8000c62:	f000 fe84 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <onGREEN1+0x28>)
 8000c6c:	f000 fe7f 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	2110      	movs	r1, #16
 8000c74:	4802      	ldr	r0, [pc, #8]	; (8000c80 <onGREEN1+0x28>)
 8000c76:	f000 fe7a 	bl	800196e <HAL_GPIO_WritePin>
};
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010800 	.word	0x40010800

08000c84 <onRED2>:

void onRED2(){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2120      	movs	r1, #32
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <onRED2+0x28>)
 8000c8e:	f000 fe6e 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2140      	movs	r1, #64	; 0x40
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <onRED2+0x28>)
 8000c98:	f000 fe69 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2180      	movs	r1, #128	; 0x80
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <onRED2+0x28>)
 8000ca2:	f000 fe64 	bl	800196e <HAL_GPIO_WritePin>
};
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40010800 	.word	0x40010800

08000cb0 <onYELLOW2>:
void onYELLOW2(){
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	4807      	ldr	r0, [pc, #28]	; (8000cd8 <onYELLOW2+0x28>)
 8000cba:	f000 fe58 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <onYELLOW2+0x28>)
 8000cc4:	f000 fe53 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	; 0x80
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <onYELLOW2+0x28>)
 8000cce:	f000 fe4e 	bl	800196e <HAL_GPIO_WritePin>
};
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40010800 	.word	0x40010800

08000cdc <onGREEN2>:
void onGREEN2(){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <onGREEN2+0x28>)
 8000ce6:	f000 fe42 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2140      	movs	r1, #64	; 0x40
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <onGREEN2+0x28>)
 8000cf0:	f000 fe3d 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2180      	movs	r1, #128	; 0x80
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <onGREEN2+0x28>)
 8000cfa:	f000 fe38 	bl	800196e <HAL_GPIO_WritePin>
};
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40010800 	.word	0x40010800

08000d08 <offALL>:

void offALL(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2104      	movs	r1, #4
 8000d10:	480e      	ldr	r0, [pc, #56]	; (8000d4c <offALL+0x44>)
 8000d12:	f000 fe2c 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	2108      	movs	r1, #8
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <offALL+0x44>)
 8000d1c:	f000 fe27 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	2110      	movs	r1, #16
 8000d24:	4809      	ldr	r0, [pc, #36]	; (8000d4c <offALL+0x44>)
 8000d26:	f000 fe22 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2120      	movs	r1, #32
 8000d2e:	4807      	ldr	r0, [pc, #28]	; (8000d4c <offALL+0x44>)
 8000d30:	f000 fe1d 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000d34:	2201      	movs	r2, #1
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	4804      	ldr	r0, [pc, #16]	; (8000d4c <offALL+0x44>)
 8000d3a:	f000 fe18 	bl	800196e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	4802      	ldr	r0, [pc, #8]	; (8000d4c <offALL+0x44>)
 8000d44:	f000 fe13 	bl	800196e <HAL_GPIO_WritePin>
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40010800 	.word	0x40010800

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d54:	f000 fb0a 	bl	800136c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d58:	f000 f85e 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5c:	f000 f8e4 	bl	8000f28 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d60:	f000 f896 	bl	8000e90 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d64:	4820      	ldr	r0, [pc, #128]	; (8000de8 <main+0x98>)
 8000d66:	f001 fa47 	bl	80021f8 <HAL_TIM_Base_Start_IT>
  setTimer3(1);
 8000d6a:	2001      	movs	r0, #1
 8000d6c:	f000 f97c 	bl	8001068 <setTimer3>
  setTimer4(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 f98d 	bl	8001090 <setTimer4>
  timerRoad1 = r_val;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	; (8000dec <main+0x9c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1d      	ldr	r2, [pc, #116]	; (8000df0 <main+0xa0>)
 8000d7c:	6013      	str	r3, [r2, #0]
  timerRoad2 = g_val;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	; (8000df4 <main+0xa4>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <main+0xa8>)
 8000d84:	6013      	str	r3, [r2, #0]
  r_inc=r_val;
 8000d86:	4b19      	ldr	r3, [pc, #100]	; (8000dec <main+0x9c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a1c      	ldr	r2, [pc, #112]	; (8000dfc <main+0xac>)
 8000d8c:	6013      	str	r3, [r2, #0]
  g_inc=g_val;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <main+0xa4>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <main+0xb0>)
 8000d94:	6013      	str	r3, [r2, #0]
  y_inc=y_val;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <main+0xb4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a1b      	ldr	r2, [pc, #108]	; (8000e08 <main+0xb8>)
 8000d9c:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (timer3_flag == 1){
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	; (8000e0c <main+0xbc>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d104      	bne.n	8000db0 <main+0x60>
		  setTimer3(10);
 8000da6:	200a      	movs	r0, #10
 8000da8:	f000 f95e 	bl	8001068 <setTimer3>
		  updateLedBuffer();
 8000dac:	f7ff fee8 	bl	8000b80 <updateLedBuffer>
	  }
	  if (timer4_flag == 1){
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <main+0xc0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d111      	bne.n	8000ddc <main+0x8c>
		  setTimer4(25);
 8000db8:	2019      	movs	r0, #25
 8000dba:	f000 f969 	bl	8001090 <setTimer4>
		  displaySignal(index_led++);
 8000dbe:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <main+0xc4>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	4913      	ldr	r1, [pc, #76]	; (8000e14 <main+0xc4>)
 8000dc6:	600a      	str	r2, [r1, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff fc1d 	bl	8000608 <displaySignal>
		  if (index_led >= 4) index_led=0;
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <main+0xc4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2b03      	cmp	r3, #3
 8000dd4:	dd02      	ble.n	8000ddc <main+0x8c>
 8000dd6:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <main+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
	  }
	  fsm_automatic();
 8000ddc:	f7ff fc56 	bl	800068c <fsm_automatic>
	  fsm_manual_run();
 8000de0:	f7ff fd90 	bl	8000904 <fsm_manual_run>
	  if (timer3_flag == 1){
 8000de4:	e7db      	b.n	8000d9e <main+0x4e>
 8000de6:	bf00      	nop
 8000de8:	200000ec 	.word	0x200000ec
 8000dec:	20000044 	.word	0x20000044
 8000df0:	2000009c 	.word	0x2000009c
 8000df4:	2000004c 	.word	0x2000004c
 8000df8:	200000a0 	.word	0x200000a0
 8000dfc:	200000a4 	.word	0x200000a4
 8000e00:	200000a8 	.word	0x200000a8
 8000e04:	20000048 	.word	0x20000048
 8000e08:	200000ac 	.word	0x200000ac
 8000e0c:	200000c8 	.word	0x200000c8
 8000e10:	200000d0 	.word	0x200000d0
 8000e14:	20000098 	.word	0x20000098

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fda2 	bl	8002970 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e42:	2310      	movs	r3, #16
 8000e44:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fda6 	bl	80019a0 <HAL_RCC_OscConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f8d7 	bl	800100c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5e:	230f      	movs	r3, #15
 8000e60:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2100      	movs	r1, #0
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 f812 	bl	8001ea0 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e82:	f000 f8c3 	bl	800100c <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3740      	adds	r7, #64	; 0x40
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eb2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eb6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ebc:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ec2:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ec4:	2209      	movs	r2, #9
 8000ec6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ece:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed4:	4813      	ldr	r0, [pc, #76]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ed6:	f001 f93f 	bl	8002158 <HAL_TIM_Base_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ee0:	f000 f894 	bl	800100c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	4619      	mov	r1, r3
 8000ef0:	480c      	ldr	r0, [pc, #48]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000ef2:	f001 fad5 	bl	80024a0 <HAL_TIM_ConfigClockSource>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 f886 	bl	800100c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_TIM2_Init+0x94>)
 8000f0e:	f001 fca1 	bl	8002854 <HAL_TIMEx_MasterConfigSynchronization>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f18:	f000 f878 	bl	800100c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200000ec 	.word	0x200000ec

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <MX_GPIO_Init+0xc0>)
 8000f3e:	699b      	ldr	r3, [r3, #24]
 8000f40:	4a29      	ldr	r2, [pc, #164]	; (8000fe8 <MX_GPIO_Init+0xc0>)
 8000f42:	f043 0304 	orr.w	r3, r3, #4
 8000f46:	6193      	str	r3, [r2, #24]
 8000f48:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <MX_GPIO_Init+0xc0>)
 8000f4a:	699b      	ldr	r3, [r3, #24]
 8000f4c:	f003 0304 	and.w	r3, r3, #4
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f54:	4b24      	ldr	r3, [pc, #144]	; (8000fe8 <MX_GPIO_Init+0xc0>)
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0xc0>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6193      	str	r3, [r2, #24]
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <MX_GPIO_Init+0xc0>)
 8000f62:	699b      	ldr	r3, [r3, #24]
 8000f64:	f003 0308 	and.w	r3, r3, #8
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|GREEN2_Pin
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f640 71dc 	movw	r1, #4060	; 0xfdc
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <MX_GPIO_Init+0xc4>)
 8000f74:	f000 fcfb 	bl	800196e <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2120      	movs	r1, #32
 8000f7c:	481b      	ldr	r0, [pc, #108]	; (8000fec <MX_GPIO_Init+0xc4>)
 8000f7e:	f000 fcf6 	bl	800196e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000f82:	2200      	movs	r2, #0
 8000f84:	217f      	movs	r1, #127	; 0x7f
 8000f86:	481a      	ldr	r0, [pc, #104]	; (8000ff0 <MX_GPIO_Init+0xc8>)
 8000f88:	f000 fcf1 	bl	800196e <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000f8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f90:	60bb      	str	r3, [r7, #8]
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4811      	ldr	r0, [pc, #68]	; (8000fec <MX_GPIO_Init+0xc4>)
 8000fa6:	f000 fb51 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000faa:	237f      	movs	r3, #127	; 0x7f
 8000fac:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <MX_GPIO_Init+0xc8>)
 8000fc2:	f000 fb43 	bl	800164c <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_MODE_Pin INC_Pin SET_VAL_Pin */
  GPIO_InitStruct.Pin = SET_MODE_Pin|INC_Pin|SET_VAL_Pin;
 8000fc6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000fca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd4:	f107 0308 	add.w	r3, r7, #8
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_GPIO_Init+0xc8>)
 8000fdc:	f000 fb36 	bl	800164c <HAL_GPIO_Init>

}
 8000fe0:	bf00      	nop
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40010c00 	.word	0x40010c00

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	timerRun();
 8000ffc:	f000 f870 	bl	80010e0 <timerRun>
	getKeyInput();
 8001000:	f7ff f8ce 	bl	80001a0 <getKeyInput>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001010:	b672      	cpsid	i
}
 8001012:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001014:	e7fe      	b.n	8001014 <Error_Handler+0x8>
	...

08001018 <setTimer1>:
int timer6_flag=0;

int timer7_counter=0;
int timer7_flag=0;

void setTimer1(int duration){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <setTimer1+0x20>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001026:	4b05      	ldr	r3, [pc, #20]	; (800103c <setTimer1+0x24>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200000b4 	.word	0x200000b4
 800103c:	200000b8 	.word	0x200000b8

08001040 <setTimer2>:

void setTimer2(int duration){
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <setTimer2+0x20>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800104e:	4b05      	ldr	r3, [pc, #20]	; (8001064 <setTimer2+0x24>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	200000bc 	.word	0x200000bc
 8001064:	200000c0 	.word	0x200000c0

08001068 <setTimer3>:

void setTimer3(int duration){
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001070:	4a05      	ldr	r2, [pc, #20]	; (8001088 <setTimer3+0x20>)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <setTimer3+0x24>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	200000c4 	.word	0x200000c4
 800108c:	200000c8 	.word	0x200000c8

08001090 <setTimer4>:

void setTimer4(int duration){
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001098:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <setTimer4+0x20>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800109e:	4b05      	ldr	r3, [pc, #20]	; (80010b4 <setTimer4+0x24>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	200000cc 	.word	0x200000cc
 80010b4:	200000d0 	.word	0x200000d0

080010b8 <setTimer5>:

void setTimer5(int duration){
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <setTimer5+0x20>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <setTimer5+0x24>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bc80      	pop	{r7}
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200000d4 	.word	0x200000d4
 80010dc:	200000d8 	.word	0x200000d8

080010e0 <timerRun>:
void setTimer7(int duration){
	timer7_counter=duration;
	timer7_flag=0;
}

void timerRun(){
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 80010e4:	4b39      	ldr	r3, [pc, #228]	; (80011cc <timerRun+0xec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	dd0b      	ble.n	8001104 <timerRun+0x24>
		timer1_counter--;
 80010ec:	4b37      	ldr	r3, [pc, #220]	; (80011cc <timerRun+0xec>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	4a36      	ldr	r2, [pc, #216]	; (80011cc <timerRun+0xec>)
 80010f4:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <timerRun+0xec>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dc02      	bgt.n	8001104 <timerRun+0x24>
			timer1_flag=1;
 80010fe:	4b34      	ldr	r3, [pc, #208]	; (80011d0 <timerRun+0xf0>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 8001104:	4b33      	ldr	r3, [pc, #204]	; (80011d4 <timerRun+0xf4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	dd0b      	ble.n	8001124 <timerRun+0x44>
		timer2_counter--;
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <timerRun+0xf4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3b01      	subs	r3, #1
 8001112:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <timerRun+0xf4>)
 8001114:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8001116:	4b2f      	ldr	r3, [pc, #188]	; (80011d4 <timerRun+0xf4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dc02      	bgt.n	8001124 <timerRun+0x44>
			timer2_flag=1;
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <timerRun+0xf8>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 8001124:	4b2d      	ldr	r3, [pc, #180]	; (80011dc <timerRun+0xfc>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	dd0b      	ble.n	8001144 <timerRun+0x64>
		timer3_counter--;
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <timerRun+0xfc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a2a      	ldr	r2, [pc, #168]	; (80011dc <timerRun+0xfc>)
 8001134:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8001136:	4b29      	ldr	r3, [pc, #164]	; (80011dc <timerRun+0xfc>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	dc02      	bgt.n	8001144 <timerRun+0x64>
			timer3_flag=1;
 800113e:	4b28      	ldr	r3, [pc, #160]	; (80011e0 <timerRun+0x100>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <timerRun+0x104>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd0b      	ble.n	8001164 <timerRun+0x84>
		timer4_counter--;
 800114c:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <timerRun+0x104>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <timerRun+0x104>)
 8001154:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <timerRun+0x104>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	dc02      	bgt.n	8001164 <timerRun+0x84>
			timer4_flag=1;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <timerRun+0x108>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8001164:	4b21      	ldr	r3, [pc, #132]	; (80011ec <timerRun+0x10c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	dd0b      	ble.n	8001184 <timerRun+0xa4>
		timer5_counter--;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <timerRun+0x10c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <timerRun+0x10c>)
 8001174:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <timerRun+0x10c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	dc02      	bgt.n	8001184 <timerRun+0xa4>
			timer5_flag=1;
 800117e:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <timerRun+0x110>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <timerRun+0x114>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dd0b      	ble.n	80011a4 <timerRun+0xc4>
		timer6_counter--;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <timerRun+0x114>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <timerRun+0x114>)
 8001194:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <timerRun+0x114>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	dc02      	bgt.n	80011a4 <timerRun+0xc4>
			timer6_flag=1;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <timerRun+0x118>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter > 0){
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <timerRun+0x11c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	dd0b      	ble.n	80011c4 <timerRun+0xe4>
		timer7_counter--;
 80011ac:	4b13      	ldr	r3, [pc, #76]	; (80011fc <timerRun+0x11c>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3b01      	subs	r3, #1
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <timerRun+0x11c>)
 80011b4:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0){
 80011b6:	4b11      	ldr	r3, [pc, #68]	; (80011fc <timerRun+0x11c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	dc02      	bgt.n	80011c4 <timerRun+0xe4>
			timer7_flag=1;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <timerRun+0x120>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr
 80011cc:	200000b4 	.word	0x200000b4
 80011d0:	200000b8 	.word	0x200000b8
 80011d4:	200000bc 	.word	0x200000bc
 80011d8:	200000c0 	.word	0x200000c0
 80011dc:	200000c4 	.word	0x200000c4
 80011e0:	200000c8 	.word	0x200000c8
 80011e4:	200000cc 	.word	0x200000cc
 80011e8:	200000d0 	.word	0x200000d0
 80011ec:	200000d4 	.word	0x200000d4
 80011f0:	200000d8 	.word	0x200000d8
 80011f4:	200000dc 	.word	0x200000dc
 80011f8:	200000e0 	.word	0x200000e0
 80011fc:	200000e4 	.word	0x200000e4
 8001200:	200000e8 	.word	0x200000e8

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <HAL_MspInit+0x5c>)
 800120c:	699b      	ldr	r3, [r3, #24]
 800120e:	4a14      	ldr	r2, [pc, #80]	; (8001260 <HAL_MspInit+0x5c>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6193      	str	r3, [r2, #24]
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_MspInit+0x5c>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <HAL_MspInit+0x5c>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <HAL_MspInit+0x5c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	61d3      	str	r3, [r2, #28]
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <HAL_MspInit+0x5c>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800123a:	4b0a      	ldr	r3, [pc, #40]	; (8001264 <HAL_MspInit+0x60>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_MspInit+0x60>)
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001256:	bf00      	nop
 8001258:	3714      	adds	r7, #20
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	40021000 	.word	0x40021000
 8001264:	40010000 	.word	0x40010000

08001268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001278:	d113      	bne.n	80012a2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <HAL_TIM_Base_MspInit+0x44>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	61d3      	str	r3, [r2, #28]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_TIM_Base_MspInit+0x44>)
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	201c      	movs	r0, #28
 8001298:	f000 f9a1 	bl	80015de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800129c:	201c      	movs	r0, #28
 800129e:	f000 f9ba 	bl	8001616 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40021000 	.word	0x40021000

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr

080012da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr

080012e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr

080012f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f6:	f000 f87f 	bl	80013f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <TIM2_IRQHandler+0x10>)
 8001306:	f000 ffc3 	bl	8002290 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000ec 	.word	0x200000ec

08001314 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001320:	f7ff fff8 	bl	8001314 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480b      	ldr	r0, [pc, #44]	; (8001354 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001326:	490c      	ldr	r1, [pc, #48]	; (8001358 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001328:	4a0c      	ldr	r2, [pc, #48]	; (800135c <LoopFillZerobss+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a09      	ldr	r2, [pc, #36]	; (8001360 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800133c:	4c09      	ldr	r4, [pc, #36]	; (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f001 faed 	bl	8002928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134e:	f7ff fcff 	bl	8000d50 <main>
  bx lr
 8001352:	4770      	bx	lr
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800135c:	080029c4 	.word	0x080029c4
  ldr r2, =_sbss
 8001360:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001364:	20000138 	.word	0x20000138

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <HAL_Init+0x28>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	; (8001394 <HAL_Init+0x28>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f923 	bl	80015c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	200f      	movs	r0, #15
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff ff3c 	bl	8001204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f93b 	bl	8001632 <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f903 	bl	80015de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	; (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000050 	.word	0x20000050
 80013f0:	20000058 	.word	0x20000058
 80013f4:	20000054 	.word	0x20000054

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_IncTick+0x20>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000058 	.word	0x20000058
 8001418:	20000134 	.word	0x20000134

0800141c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <HAL_GetTick+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	20000134 	.word	0x20000134

08001430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001440:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800144c:	4013      	ands	r3, r2
 800144e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800145c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <__NVIC_SetPriorityGrouping+0x44>)
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	60d3      	str	r3, [r2, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <__NVIC_GetPriorityGrouping+0x18>)
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	0a1b      	lsrs	r3, r3, #8
 8001482:	f003 0307 	and.w	r3, r3, #7
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	db0b      	blt.n	80014be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	f003 021f 	and.w	r2, r3, #31
 80014ac:	4906      	ldr	r1, [pc, #24]	; (80014c8 <__NVIC_EnableIRQ+0x34>)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	095b      	lsrs	r3, r3, #5
 80014b4:	2001      	movs	r0, #1
 80014b6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr
 80014c8:	e000e100 	.word	0xe000e100

080014cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	6039      	str	r1, [r7, #0]
 80014d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	db0a      	blt.n	80014f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	b2da      	uxtb	r2, r3
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <__NVIC_SetPriority+0x4c>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	0112      	lsls	r2, r2, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	440b      	add	r3, r1
 80014f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014f4:	e00a      	b.n	800150c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4908      	ldr	r1, [pc, #32]	; (800151c <__NVIC_SetPriority+0x50>)
 80014fc:	79fb      	ldrb	r3, [r7, #7]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	3b04      	subs	r3, #4
 8001504:	0112      	lsls	r2, r2, #4
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	440b      	add	r3, r1
 800150a:	761a      	strb	r2, [r3, #24]
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	bc80      	pop	{r7}
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000e100 	.word	0xe000e100
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001520:	b480      	push	{r7}
 8001522:	b089      	sub	sp, #36	; 0x24
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2b04      	cmp	r3, #4
 800153c:	bf28      	it	cs
 800153e:	2304      	movcs	r3, #4
 8001540:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3304      	adds	r3, #4
 8001546:	2b06      	cmp	r3, #6
 8001548:	d902      	bls.n	8001550 <NVIC_EncodePriority+0x30>
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3b03      	subs	r3, #3
 800154e:	e000      	b.n	8001552 <NVIC_EncodePriority+0x32>
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 32ff 	mov.w	r2, #4294967295
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43da      	mvns	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	401a      	ands	r2, r3
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001568:	f04f 31ff 	mov.w	r1, #4294967295
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa01 f303 	lsl.w	r3, r1, r3
 8001572:	43d9      	mvns	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001578:	4313      	orrs	r3, r2
         );
}
 800157a:	4618      	mov	r0, r3
 800157c:	3724      	adds	r7, #36	; 0x24
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001594:	d301      	bcc.n	800159a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001596:	2301      	movs	r3, #1
 8001598:	e00f      	b.n	80015ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <SysTick_Config+0x40>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3b01      	subs	r3, #1
 80015a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a2:	210f      	movs	r1, #15
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f7ff ff90 	bl	80014cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ac:	4b05      	ldr	r3, [pc, #20]	; (80015c4 <SysTick_Config+0x40>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b2:	4b04      	ldr	r3, [pc, #16]	; (80015c4 <SysTick_Config+0x40>)
 80015b4:	2207      	movs	r2, #7
 80015b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	e000e010 	.word	0xe000e010

080015c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff ff2d 	bl	8001430 <__NVIC_SetPriorityGrouping>
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015de:	b580      	push	{r7, lr}
 80015e0:	b086      	sub	sp, #24
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	4603      	mov	r3, r0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015f0:	f7ff ff42 	bl	8001478 <__NVIC_GetPriorityGrouping>
 80015f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	6978      	ldr	r0, [r7, #20]
 80015fc:	f7ff ff90 	bl	8001520 <NVIC_EncodePriority>
 8001600:	4602      	mov	r2, r0
 8001602:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff5f 	bl	80014cc <__NVIC_SetPriority>
}
 800160e:	bf00      	nop
 8001610:	3718      	adds	r7, #24
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001624:	4618      	mov	r0, r3
 8001626:	f7ff ff35 	bl	8001494 <__NVIC_EnableIRQ>
}
 800162a:	bf00      	nop
 800162c:	3708      	adds	r7, #8
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ffa2 	bl	8001584 <SysTick_Config>
 8001640:	4603      	mov	r3, r0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
	...

0800164c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800164c:	b480      	push	{r7}
 800164e:	b08b      	sub	sp, #44	; 0x2c
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001656:	2300      	movs	r3, #0
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800165e:	e148      	b.n	80018f2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001660:	2201      	movs	r2, #1
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	69fa      	ldr	r2, [r7, #28]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	429a      	cmp	r2, r3
 800167a:	f040 8137 	bne.w	80018ec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	4aa3      	ldr	r2, [pc, #652]	; (8001910 <HAL_GPIO_Init+0x2c4>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d05e      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 8001688:	4aa1      	ldr	r2, [pc, #644]	; (8001910 <HAL_GPIO_Init+0x2c4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d875      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 800168e:	4aa1      	ldr	r2, [pc, #644]	; (8001914 <HAL_GPIO_Init+0x2c8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d058      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 8001694:	4a9f      	ldr	r2, [pc, #636]	; (8001914 <HAL_GPIO_Init+0x2c8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d86f      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 800169a:	4a9f      	ldr	r2, [pc, #636]	; (8001918 <HAL_GPIO_Init+0x2cc>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d052      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016a0:	4a9d      	ldr	r2, [pc, #628]	; (8001918 <HAL_GPIO_Init+0x2cc>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d869      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016a6:	4a9d      	ldr	r2, [pc, #628]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d04c      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016ac:	4a9b      	ldr	r2, [pc, #620]	; (800191c <HAL_GPIO_Init+0x2d0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d863      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016b2:	4a9b      	ldr	r2, [pc, #620]	; (8001920 <HAL_GPIO_Init+0x2d4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d046      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
 80016b8:	4a99      	ldr	r2, [pc, #612]	; (8001920 <HAL_GPIO_Init+0x2d4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d85d      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016be:	2b12      	cmp	r3, #18
 80016c0:	d82a      	bhi.n	8001718 <HAL_GPIO_Init+0xcc>
 80016c2:	2b12      	cmp	r3, #18
 80016c4:	d859      	bhi.n	800177a <HAL_GPIO_Init+0x12e>
 80016c6:	a201      	add	r2, pc, #4	; (adr r2, 80016cc <HAL_GPIO_Init+0x80>)
 80016c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016cc:	08001747 	.word	0x08001747
 80016d0:	08001721 	.word	0x08001721
 80016d4:	08001733 	.word	0x08001733
 80016d8:	08001775 	.word	0x08001775
 80016dc:	0800177b 	.word	0x0800177b
 80016e0:	0800177b 	.word	0x0800177b
 80016e4:	0800177b 	.word	0x0800177b
 80016e8:	0800177b 	.word	0x0800177b
 80016ec:	0800177b 	.word	0x0800177b
 80016f0:	0800177b 	.word	0x0800177b
 80016f4:	0800177b 	.word	0x0800177b
 80016f8:	0800177b 	.word	0x0800177b
 80016fc:	0800177b 	.word	0x0800177b
 8001700:	0800177b 	.word	0x0800177b
 8001704:	0800177b 	.word	0x0800177b
 8001708:	0800177b 	.word	0x0800177b
 800170c:	0800177b 	.word	0x0800177b
 8001710:	08001729 	.word	0x08001729
 8001714:	0800173d 	.word	0x0800173d
 8001718:	4a82      	ldr	r2, [pc, #520]	; (8001924 <HAL_GPIO_Init+0x2d8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800171e:	e02c      	b.n	800177a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	623b      	str	r3, [r7, #32]
          break;
 8001726:	e029      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68db      	ldr	r3, [r3, #12]
 800172c:	3304      	adds	r3, #4
 800172e:	623b      	str	r3, [r7, #32]
          break;
 8001730:	e024      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	3308      	adds	r3, #8
 8001738:	623b      	str	r3, [r7, #32]
          break;
 800173a:	e01f      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	330c      	adds	r3, #12
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	e01a      	b.n	800177c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800174e:	2304      	movs	r3, #4
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e013      	b.n	800177c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d105      	bne.n	8001768 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800175c:	2308      	movs	r3, #8
 800175e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	611a      	str	r2, [r3, #16]
          break;
 8001766:	e009      	b.n	800177c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001768:	2308      	movs	r3, #8
 800176a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69fa      	ldr	r2, [r7, #28]
 8001770:	615a      	str	r2, [r3, #20]
          break;
 8001772:	e003      	b.n	800177c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001774:	2300      	movs	r3, #0
 8001776:	623b      	str	r3, [r7, #32]
          break;
 8001778:	e000      	b.n	800177c <HAL_GPIO_Init+0x130>
          break;
 800177a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	2bff      	cmp	r3, #255	; 0xff
 8001780:	d801      	bhi.n	8001786 <HAL_GPIO_Init+0x13a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	e001      	b.n	800178a <HAL_GPIO_Init+0x13e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3304      	adds	r3, #4
 800178a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2bff      	cmp	r3, #255	; 0xff
 8001790:	d802      	bhi.n	8001798 <HAL_GPIO_Init+0x14c>
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	e002      	b.n	800179e <HAL_GPIO_Init+0x152>
 8001798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179a:	3b08      	subs	r3, #8
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	210f      	movs	r1, #15
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	fa01 f303 	lsl.w	r3, r1, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	401a      	ands	r2, r3
 80017b0:	6a39      	ldr	r1, [r7, #32]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	431a      	orrs	r2, r3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f000 8090 	beq.w	80018ec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017cc:	4b56      	ldr	r3, [pc, #344]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a55      	ldr	r2, [pc, #340]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 80017d2:	f043 0301 	orr.w	r3, r3, #1
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b53      	ldr	r3, [pc, #332]	; (8001928 <HAL_GPIO_Init+0x2dc>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0301 	and.w	r3, r3, #1
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017e4:	4a51      	ldr	r2, [pc, #324]	; (800192c <HAL_GPIO_Init+0x2e0>)
 80017e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4013      	ands	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a49      	ldr	r2, [pc, #292]	; (8001930 <HAL_GPIO_Init+0x2e4>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d00d      	beq.n	800182c <HAL_GPIO_Init+0x1e0>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a48      	ldr	r2, [pc, #288]	; (8001934 <HAL_GPIO_Init+0x2e8>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d007      	beq.n	8001828 <HAL_GPIO_Init+0x1dc>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a47      	ldr	r2, [pc, #284]	; (8001938 <HAL_GPIO_Init+0x2ec>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_GPIO_Init+0x1d8>
 8001820:	2302      	movs	r3, #2
 8001822:	e004      	b.n	800182e <HAL_GPIO_Init+0x1e2>
 8001824:	2303      	movs	r3, #3
 8001826:	e002      	b.n	800182e <HAL_GPIO_Init+0x1e2>
 8001828:	2301      	movs	r3, #1
 800182a:	e000      	b.n	800182e <HAL_GPIO_Init+0x1e2>
 800182c:	2300      	movs	r3, #0
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	f002 0203 	and.w	r2, r2, #3
 8001834:	0092      	lsls	r2, r2, #2
 8001836:	4093      	lsls	r3, r2
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4313      	orrs	r3, r2
 800183c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800183e:	493b      	ldr	r1, [pc, #236]	; (800192c <HAL_GPIO_Init+0x2e0>)
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	089b      	lsrs	r3, r3, #2
 8001844:	3302      	adds	r3, #2
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d006      	beq.n	8001866 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001858:	4b38      	ldr	r3, [pc, #224]	; (800193c <HAL_GPIO_Init+0x2f0>)
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	4937      	ldr	r1, [pc, #220]	; (800193c <HAL_GPIO_Init+0x2f0>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	608b      	str	r3, [r1, #8]
 8001864:	e006      	b.n	8001874 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001866:	4b35      	ldr	r3, [pc, #212]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	43db      	mvns	r3, r3
 800186e:	4933      	ldr	r1, [pc, #204]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001870:	4013      	ands	r3, r2
 8001872:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187c:	2b00      	cmp	r3, #0
 800187e:	d006      	beq.n	800188e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001880:	4b2e      	ldr	r3, [pc, #184]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	492d      	ldr	r1, [pc, #180]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	4313      	orrs	r3, r2
 800188a:	60cb      	str	r3, [r1, #12]
 800188c:	e006      	b.n	800189c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800188e:	4b2b      	ldr	r3, [pc, #172]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	43db      	mvns	r3, r3
 8001896:	4929      	ldr	r1, [pc, #164]	; (800193c <HAL_GPIO_Init+0x2f0>)
 8001898:	4013      	ands	r3, r2
 800189a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d006      	beq.n	80018b6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018a8:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4923      	ldr	r1, [pc, #140]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
 80018b4:	e006      	b.n	80018c4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	43db      	mvns	r3, r3
 80018be:	491f      	ldr	r1, [pc, #124]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4919      	ldr	r1, [pc, #100]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	4313      	orrs	r3, r2
 80018da:	600b      	str	r3, [r1, #0]
 80018dc:	e006      	b.n	80018ec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	4915      	ldr	r1, [pc, #84]	; (800193c <HAL_GPIO_Init+0x2f0>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	3301      	adds	r3, #1
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	fa22 f303 	lsr.w	r3, r2, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f47f aeaf 	bne.w	8001660 <HAL_GPIO_Init+0x14>
  }
}
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	372c      	adds	r7, #44	; 0x2c
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	10320000 	.word	0x10320000
 8001914:	10310000 	.word	0x10310000
 8001918:	10220000 	.word	0x10220000
 800191c:	10210000 	.word	0x10210000
 8001920:	10120000 	.word	0x10120000
 8001924:	10110000 	.word	0x10110000
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000
 8001930:	40010800 	.word	0x40010800
 8001934:	40010c00 	.word	0x40010c00
 8001938:	40011000 	.word	0x40011000
 800193c:	40010400 	.word	0x40010400

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	887b      	ldrh	r3, [r7, #2]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d002      	beq.n	800195e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001958:	2301      	movs	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	e001      	b.n	8001962 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001962:	7bfb      	ldrb	r3, [r7, #15]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr

0800196e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	460b      	mov	r3, r1
 8001978:	807b      	strh	r3, [r7, #2]
 800197a:	4613      	mov	r3, r2
 800197c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197e:	787b      	ldrb	r3, [r7, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001984:	887a      	ldrh	r2, [r7, #2]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800198a:	e003      	b.n	8001994 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	041a      	lsls	r2, r3, #16
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	611a      	str	r2, [r3, #16]
}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e26c      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 8087 	beq.w	8001ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c0:	4b92      	ldr	r3, [pc, #584]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 030c 	and.w	r3, r3, #12
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d00c      	beq.n	80019e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019cc:	4b8f      	ldr	r3, [pc, #572]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 030c 	and.w	r3, r3, #12
 80019d4:	2b08      	cmp	r3, #8
 80019d6:	d112      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
 80019d8:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e4:	d10b      	bne.n	80019fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e6:	4b89      	ldr	r3, [pc, #548]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d06c      	beq.n	8001acc <HAL_RCC_OscConfig+0x12c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d168      	bne.n	8001acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e246      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a06:	d106      	bne.n	8001a16 <HAL_RCC_OscConfig+0x76>
 8001a08:	4b80      	ldr	r3, [pc, #512]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a7f      	ldr	r2, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	e02e      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x98>
 8001a1e:	4b7b      	ldr	r3, [pc, #492]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a7a      	ldr	r2, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	4b78      	ldr	r3, [pc, #480]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a77      	ldr	r2, [pc, #476]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	e01d      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0xbc>
 8001a42:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a71      	ldr	r2, [pc, #452]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a4c:	6013      	str	r3, [r2, #0]
 8001a4e:	4b6f      	ldr	r3, [pc, #444]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a6e      	ldr	r2, [pc, #440]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xd4>
 8001a5c:	4b6b      	ldr	r3, [pc, #428]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a6a      	ldr	r2, [pc, #424]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a66:	6013      	str	r3, [r2, #0]
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a67      	ldr	r2, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d013      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fcce 	bl	800141c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7ff fcca 	bl	800141c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1fa      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a96:	4b5d      	ldr	r3, [pc, #372]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d0f0      	beq.n	8001a84 <HAL_RCC_OscConfig+0xe4>
 8001aa2:	e014      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fcba 	bl	800141c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aac:	f7ff fcb6 	bl	800141c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e1e6      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001abe:	4b53      	ldr	r3, [pc, #332]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f0      	bne.n	8001aac <HAL_RCC_OscConfig+0x10c>
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d063      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ada:	4b4c      	ldr	r3, [pc, #304]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ae6:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b08      	cmp	r3, #8
 8001af0:	d11c      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
 8001af2:	4b46      	ldr	r3, [pc, #280]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d116      	bne.n	8001b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afe:	4b43      	ldr	r3, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d001      	beq.n	8001b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e1ba      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b16:	4b3d      	ldr	r3, [pc, #244]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4939      	ldr	r1, [pc, #228]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2a:	e03a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d020      	beq.n	8001b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b34:	4b36      	ldr	r3, [pc, #216]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3a:	f7ff fc6f 	bl	800141c <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b42:	f7ff fc6b 	bl	800141c <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e19b      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b2a      	ldr	r3, [pc, #168]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4927      	ldr	r1, [pc, #156]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_RCC_OscConfig+0x270>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fc4e 	bl	800141c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b84:	f7ff fc4a 	bl	800141c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e17a      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03a      	beq.n	8001c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d019      	beq.n	8001bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fc2e 	bl	800141c <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fc2a 	bl	800141c <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e15a      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd6:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d0f0      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f000 fa9a 	bl	800211c <RCC_Delay>
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_OscConfig+0x274>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fc14 	bl	800141c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf6:	e00f      	b.n	8001c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bf8:	f7ff fc10 	bl	800141c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d908      	bls.n	8001c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e140      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	42420000 	.word	0x42420000
 8001c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c18:	4b9e      	ldr	r3, [pc, #632]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d1e9      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	f000 80a6 	beq.w	8001d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c32:	2300      	movs	r3, #0
 8001c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c36:	4b97      	ldr	r3, [pc, #604]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d10d      	bne.n	8001c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c42:	4b94      	ldr	r3, [pc, #592]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001c44:	69db      	ldr	r3, [r3, #28]
 8001c46:	4a93      	ldr	r2, [pc, #588]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	61d3      	str	r3, [r2, #28]
 8001c4e:	4b91      	ldr	r3, [pc, #580]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c56:	60bb      	str	r3, [r7, #8]
 8001c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	4b8e      	ldr	r3, [pc, #568]	; (8001e98 <HAL_RCC_OscConfig+0x4f8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d118      	bne.n	8001c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6a:	4b8b      	ldr	r3, [pc, #556]	; (8001e98 <HAL_RCC_OscConfig+0x4f8>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a8a      	ldr	r2, [pc, #552]	; (8001e98 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c76:	f7ff fbd1 	bl	800141c <HAL_GetTick>
 8001c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c7e:	f7ff fbcd 	bl	800141c <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b64      	cmp	r3, #100	; 0x64
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0fd      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c90:	4b81      	ldr	r3, [pc, #516]	; (8001e98 <HAL_RCC_OscConfig+0x4f8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d0f0      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x312>
 8001ca4:	4b7b      	ldr	r3, [pc, #492]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	4a7a      	ldr	r2, [pc, #488]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	6213      	str	r3, [r2, #32]
 8001cb0:	e02d      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x334>
 8001cba:	4b76      	ldr	r3, [pc, #472]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4a75      	ldr	r2, [pc, #468]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6213      	str	r3, [r2, #32]
 8001cc6:	4b73      	ldr	r3, [pc, #460]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	4a72      	ldr	r2, [pc, #456]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	f023 0304 	bic.w	r3, r3, #4
 8001cd0:	6213      	str	r3, [r2, #32]
 8001cd2:	e01c      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b05      	cmp	r3, #5
 8001cda:	d10c      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x356>
 8001cdc:	4b6d      	ldr	r3, [pc, #436]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4a6c      	ldr	r2, [pc, #432]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	f043 0304 	orr.w	r3, r3, #4
 8001ce6:	6213      	str	r3, [r2, #32]
 8001ce8:	4b6a      	ldr	r3, [pc, #424]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cea:	6a1b      	ldr	r3, [r3, #32]
 8001cec:	4a69      	ldr	r2, [pc, #420]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6213      	str	r3, [r2, #32]
 8001cf4:	e00b      	b.n	8001d0e <HAL_RCC_OscConfig+0x36e>
 8001cf6:	4b67      	ldr	r3, [pc, #412]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	6a1b      	ldr	r3, [r3, #32]
 8001cfa:	4a66      	ldr	r2, [pc, #408]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	f023 0301 	bic.w	r3, r3, #1
 8001d00:	6213      	str	r3, [r2, #32]
 8001d02:	4b64      	ldr	r3, [pc, #400]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001d04:	6a1b      	ldr	r3, [r3, #32]
 8001d06:	4a63      	ldr	r2, [pc, #396]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	f023 0304 	bic.w	r3, r3, #4
 8001d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d015      	beq.n	8001d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7ff fb81 	bl	800141c <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1c:	e00a      	b.n	8001d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1e:	f7ff fb7d 	bl	800141c <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e0ab      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d34:	4b57      	ldr	r3, [pc, #348]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	6a1b      	ldr	r3, [r3, #32]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0ee      	beq.n	8001d1e <HAL_RCC_OscConfig+0x37e>
 8001d40:	e014      	b.n	8001d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d42:	f7ff fb6b 	bl	800141c <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d48:	e00a      	b.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7ff fb67 	bl	800141c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e095      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d60:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	6a1b      	ldr	r3, [r3, #32]
 8001d64:	f003 0302 	and.w	r3, r3, #2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1ee      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d105      	bne.n	8001d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d72:	4b48      	ldr	r3, [pc, #288]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a47      	ldr	r2, [pc, #284]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 8081 	beq.w	8001e8a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d88:	4b42      	ldr	r3, [pc, #264]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d061      	beq.n	8001e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d146      	bne.n	8001e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_RCC_OscConfig+0x4fc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff fb3b 	bl	800141c <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff fb37 	bl	800141c <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e067      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dbc:	4b35      	ldr	r3, [pc, #212]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d108      	bne.n	8001de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd2:	4b30      	ldr	r3, [pc, #192]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	492d      	ldr	r1, [pc, #180]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de4:	4b2b      	ldr	r3, [pc, #172]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a19      	ldr	r1, [r3, #32]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	430b      	orrs	r3, r1
 8001df6:	4927      	ldr	r1, [pc, #156]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <HAL_RCC_OscConfig+0x4fc>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fb0b 	bl	800141c <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0a:	f7ff fb07 	bl	800141c <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e037      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e1c:	4b1d      	ldr	r3, [pc, #116]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0f0      	beq.n	8001e0a <HAL_RCC_OscConfig+0x46a>
 8001e28:	e02f      	b.n	8001e8a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_RCC_OscConfig+0x4fc>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff faf4 	bl	800141c <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e38:	f7ff faf0 	bl	800141c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e020      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x498>
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e013      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_RCC_OscConfig+0x4f4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a1b      	ldr	r3, [r3, #32]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40021000 	.word	0x40021000
 8001e98:	40007000 	.word	0x40007000
 8001e9c:	42420060 	.word	0x42420060

08001ea0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0d0      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b6a      	ldr	r3, [pc, #424]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d910      	bls.n	8001ee4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b67      	ldr	r3, [pc, #412]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 0207 	bic.w	r2, r3, #7
 8001eca:	4965      	ldr	r1, [pc, #404]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed2:	4b63      	ldr	r3, [pc, #396]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	683a      	ldr	r2, [r7, #0]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d001      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0b8      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d020      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001efc:	4b59      	ldr	r3, [pc, #356]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a58      	ldr	r2, [pc, #352]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	4a52      	ldr	r2, [pc, #328]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b50      	ldr	r3, [pc, #320]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	494d      	ldr	r1, [pc, #308]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d040      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f46:	4b47      	ldr	r3, [pc, #284]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d115      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e07f      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d107      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5e:	4b41      	ldr	r3, [pc, #260]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d109      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e073      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	4b3d      	ldr	r3, [pc, #244]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06b      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7e:	4b39      	ldr	r3, [pc, #228]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f023 0203 	bic.w	r2, r3, #3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4936      	ldr	r1, [pc, #216]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f90:	f7ff fa44 	bl	800141c <HAL_GetTick>
 8001f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	e00a      	b.n	8001fae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f98:	f7ff fa40 	bl	800141c <HAL_GetTick>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e053      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 020c 	and.w	r2, r3, #12
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d1eb      	bne.n	8001f98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d210      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fce:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 0207 	bic.w	r2, r3, #7
 8001fd6:	4922      	ldr	r1, [pc, #136]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b20      	ldr	r3, [pc, #128]	; (8002060 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0307 	and.w	r3, r3, #7
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e032      	b.n	8002056 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d008      	beq.n	800200e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4916      	ldr	r1, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0308 	and.w	r3, r3, #8
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201a:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 800202a:	4313      	orrs	r3, r2
 800202c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800202e:	f000 f821 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002032:	4602      	mov	r2, r0
 8002034:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	091b      	lsrs	r3, r3, #4
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	490a      	ldr	r1, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x1c8>)
 8002040:	5ccb      	ldrb	r3, [r1, r3]
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	4a09      	ldr	r2, [pc, #36]	; (800206c <HAL_RCC_ClockConfig+0x1cc>)
 8002048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1d0>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f9a2 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40022000 	.word	0x40022000
 8002064:	40021000 	.word	0x40021000
 8002068:	08002998 	.word	0x08002998
 800206c:	20000050 	.word	0x20000050
 8002070:	20000054 	.word	0x20000054

08002074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b087      	sub	sp, #28
 8002078:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	2300      	movs	r3, #0
 8002080:	60bb      	str	r3, [r7, #8]
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800208e:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b04      	cmp	r3, #4
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x30>
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x36>
 80020a2:	e027      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_GetSysClockFreq+0x98>)
 80020a6:	613b      	str	r3, [r7, #16]
      break;
 80020a8:	e027      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	0c9b      	lsrs	r3, r3, #18
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020b4:	5cd3      	ldrb	r3, [r2, r3]
 80020b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d010      	beq.n	80020e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_GetSysClockFreq+0x94>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	0c5b      	lsrs	r3, r3, #17
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020ce:	5cd3      	ldrb	r3, [r2, r3]
 80020d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <HAL_RCC_GetSysClockFreq+0x98>)
 80020d6:	fb02 f203 	mul.w	r2, r2, r3
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	e004      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0c      	ldr	r2, [pc, #48]	; (8002118 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	613b      	str	r3, [r7, #16]
      break;
 80020f2:	e002      	b.n	80020fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_RCC_GetSysClockFreq+0x98>)
 80020f6:	613b      	str	r3, [r7, #16]
      break;
 80020f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fa:	693b      	ldr	r3, [r7, #16]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	371c      	adds	r7, #28
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	080029a8 	.word	0x080029a8
 8002114:	080029b8 	.word	0x080029b8
 8002118:	003d0900 	.word	0x003d0900

0800211c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <RCC_Delay+0x34>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <RCC_Delay+0x38>)
 800212a:	fba2 2303 	umull	r2, r3, r2, r3
 800212e:	0a5b      	lsrs	r3, r3, #9
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	fb02 f303 	mul.w	r3, r2, r3
 8002136:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002138:	bf00      	nop
  }
  while (Delay --);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	1e5a      	subs	r2, r3, #1
 800213e:	60fa      	str	r2, [r7, #12]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f9      	bne.n	8002138 <RCC_Delay+0x1c>
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000050 	.word	0x20000050
 8002154:	10624dd3 	.word	0x10624dd3

08002158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e041      	b.n	80021ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002170:	b2db      	uxtb	r3, r3
 8002172:	2b00      	cmp	r3, #0
 8002174:	d106      	bne.n	8002184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff f872 	bl	8001268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f000 fa6e 	bl	8002678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2201      	movs	r2, #1
 80021a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002206:	b2db      	uxtb	r3, r3
 8002208:	2b01      	cmp	r3, #1
 800220a:	d001      	beq.n	8002210 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e035      	b.n	800227c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68da      	ldr	r2, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_TIM_Base_Start_IT+0x90>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_TIM_Base_Start_IT+0x4e>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223a:	d004      	beq.n	8002246 <HAL_TIM_Base_Start_IT+0x4e>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a12      	ldr	r2, [pc, #72]	; (800228c <HAL_TIM_Base_Start_IT+0x94>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d111      	bne.n	800226a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b06      	cmp	r3, #6
 8002256:	d010      	beq.n	800227a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002268:	e007      	b.n	800227a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40012c00 	.word	0x40012c00
 800228c:	40000400 	.word	0x40000400

08002290 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d122      	bne.n	80022ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d11b      	bne.n	80022ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f06f 0202 	mvn.w	r2, #2
 80022bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 f9b4 	bl	8002640 <HAL_TIM_IC_CaptureCallback>
 80022d8:	e005      	b.n	80022e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f9a7 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f9b6 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2200      	movs	r2, #0
 80022ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d122      	bne.n	8002340 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b04      	cmp	r3, #4
 8002306:	d11b      	bne.n	8002340 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f06f 0204 	mvn.w	r2, #4
 8002310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2202      	movs	r2, #2
 8002316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f98a 	bl	8002640 <HAL_TIM_IC_CaptureCallback>
 800232c:	e005      	b.n	800233a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f97d 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 f98c 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0308 	and.w	r3, r3, #8
 800234a:	2b08      	cmp	r3, #8
 800234c:	d122      	bne.n	8002394 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b08      	cmp	r3, #8
 800235a:	d11b      	bne.n	8002394 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0208 	mvn.w	r2, #8
 8002364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2204      	movs	r2, #4
 800236a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 f960 	bl	8002640 <HAL_TIM_IC_CaptureCallback>
 8002380:	e005      	b.n	800238e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f953 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f962 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	f003 0310 	and.w	r3, r3, #16
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d122      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0310 	and.w	r3, r3, #16
 80023ac:	2b10      	cmp	r3, #16
 80023ae:	d11b      	bne.n	80023e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f06f 0210 	mvn.w	r2, #16
 80023b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2208      	movs	r2, #8
 80023be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f000 f936 	bl	8002640 <HAL_TIM_IC_CaptureCallback>
 80023d4:	e005      	b.n	80023e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023d6:	6878      	ldr	r0, [r7, #4]
 80023d8:	f000 f929 	bl	800262e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f000 f938 	bl	8002652 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d10e      	bne.n	8002414 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b01      	cmp	r3, #1
 8002402:	d107      	bne.n	8002414 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f06f 0201 	mvn.w	r2, #1
 800240c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fe fdf0 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b80      	cmp	r3, #128	; 0x80
 8002420:	d10e      	bne.n	8002440 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242c:	2b80      	cmp	r3, #128	; 0x80
 800242e:	d107      	bne.n	8002440 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fa6b 	bl	8002916 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244a:	2b40      	cmp	r3, #64	; 0x40
 800244c:	d10e      	bne.n	800246c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d107      	bne.n	800246c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002466:	6878      	ldr	r0, [r7, #4]
 8002468:	f000 f8fc 	bl	8002664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b20      	cmp	r3, #32
 8002478:	d10e      	bne.n	8002498 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b20      	cmp	r3, #32
 8002486:	d107      	bne.n	8002498 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f06f 0220 	mvn.w	r2, #32
 8002490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 fa36 	bl	8002904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d101      	bne.n	80024bc <HAL_TIM_ConfigClockSource+0x1c>
 80024b8:	2302      	movs	r3, #2
 80024ba:	e0b4      	b.n	8002626 <HAL_TIM_ConfigClockSource+0x186>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f4:	d03e      	beq.n	8002574 <HAL_TIM_ConfigClockSource+0xd4>
 80024f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024fa:	f200 8087 	bhi.w	800260c <HAL_TIM_ConfigClockSource+0x16c>
 80024fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002502:	f000 8086 	beq.w	8002612 <HAL_TIM_ConfigClockSource+0x172>
 8002506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800250a:	d87f      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800250c:	2b70      	cmp	r3, #112	; 0x70
 800250e:	d01a      	beq.n	8002546 <HAL_TIM_ConfigClockSource+0xa6>
 8002510:	2b70      	cmp	r3, #112	; 0x70
 8002512:	d87b      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 8002514:	2b60      	cmp	r3, #96	; 0x60
 8002516:	d050      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x11a>
 8002518:	2b60      	cmp	r3, #96	; 0x60
 800251a:	d877      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b50      	cmp	r3, #80	; 0x50
 800251e:	d03c      	beq.n	800259a <HAL_TIM_ConfigClockSource+0xfa>
 8002520:	2b50      	cmp	r3, #80	; 0x50
 8002522:	d873      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d058      	beq.n	80025da <HAL_TIM_ConfigClockSource+0x13a>
 8002528:	2b40      	cmp	r3, #64	; 0x40
 800252a:	d86f      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b30      	cmp	r3, #48	; 0x30
 800252e:	d064      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002530:	2b30      	cmp	r3, #48	; 0x30
 8002532:	d86b      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b20      	cmp	r3, #32
 8002536:	d060      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002538:	2b20      	cmp	r3, #32
 800253a:	d867      	bhi.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b00      	cmp	r3, #0
 800253e:	d05c      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002540:	2b10      	cmp	r3, #16
 8002542:	d05a      	beq.n	80025fa <HAL_TIM_ConfigClockSource+0x15a>
 8002544:	e062      	b.n	800260c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6818      	ldr	r0, [r3, #0]
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	6899      	ldr	r1, [r3, #8]
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f000 f95e 	bl	8002816 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002568:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	609a      	str	r2, [r3, #8]
      break;
 8002572:	e04f      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6818      	ldr	r0, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	6899      	ldr	r1, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	f000 f947 	bl	8002816 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002596:	609a      	str	r2, [r3, #8]
      break;
 8002598:	e03c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	461a      	mov	r2, r3
 80025a8:	f000 f8be 	bl	8002728 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2150      	movs	r1, #80	; 0x50
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f915 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 80025b8:	e02c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6818      	ldr	r0, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6859      	ldr	r1, [r3, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f000 f8dc 	bl	8002784 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2160      	movs	r1, #96	; 0x60
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 f905 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 80025d8:	e01c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f000 f89e 	bl	8002728 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2140      	movs	r1, #64	; 0x40
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f8f5 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 80025f8:	e00c      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4619      	mov	r1, r3
 8002604:	4610      	mov	r0, r2
 8002606:	f000 f8ec 	bl	80027e2 <TIM_ITRx_SetConfig>
      break;
 800260a:	e003      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
      break;
 8002610:	e000      	b.n	8002614 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002612:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002624:	7bfb      	ldrb	r3, [r7, #15]
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}

0800262e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr

08002640 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a25      	ldr	r2, [pc, #148]	; (8002720 <TIM_Base_SetConfig+0xa8>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d007      	beq.n	80026a0 <TIM_Base_SetConfig+0x28>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d003      	beq.n	80026a0 <TIM_Base_SetConfig+0x28>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a22      	ldr	r2, [pc, #136]	; (8002724 <TIM_Base_SetConfig+0xac>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d108      	bne.n	80026b2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	68fa      	ldr	r2, [r7, #12]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a1a      	ldr	r2, [pc, #104]	; (8002720 <TIM_Base_SetConfig+0xa8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d007      	beq.n	80026ca <TIM_Base_SetConfig+0x52>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c0:	d003      	beq.n	80026ca <TIM_Base_SetConfig+0x52>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a17      	ldr	r2, [pc, #92]	; (8002724 <TIM_Base_SetConfig+0xac>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d108      	bne.n	80026dc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	4313      	orrs	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <TIM_Base_SetConfig+0xa8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d103      	bne.n	8002710 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	691a      	ldr	r2, [r3, #16]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	615a      	str	r2, [r3, #20]
}
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	40012c00 	.word	0x40012c00
 8002724:	40000400 	.word	0x40000400

08002728 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002728:	b480      	push	{r7}
 800272a:	b087      	sub	sp, #28
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	f023 0201 	bic.w	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002752:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f023 030a 	bic.w	r3, r3, #10
 8002764:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
 800276c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	621a      	str	r2, [r3, #32]
}
 800277a:	bf00      	nop
 800277c:	371c      	adds	r7, #28
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002784:	b480      	push	{r7}
 8002786:	b087      	sub	sp, #28
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	f023 0210 	bic.w	r2, r3, #16
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	031b      	lsls	r3, r3, #12
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027c0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	693a      	ldr	r2, [r7, #16]
 80027d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	621a      	str	r2, [r3, #32]
}
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	bc80      	pop	{r7}
 80027e0:	4770      	bx	lr

080027e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	f043 0307 	orr.w	r3, r3, #7
 8002804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	609a      	str	r2, [r3, #8]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	bc80      	pop	{r7}
 8002814:	4770      	bx	lr

08002816 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002816:	b480      	push	{r7}
 8002818:	b087      	sub	sp, #28
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
 8002822:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002830:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	021a      	lsls	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	431a      	orrs	r2, r3
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	4313      	orrs	r3, r2
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	4313      	orrs	r3, r2
 8002842:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	609a      	str	r2, [r3, #8]
}
 800284a:	bf00      	nop
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002868:	2302      	movs	r3, #2
 800286a:	e041      	b.n	80028f0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2202      	movs	r2, #2
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a14      	ldr	r2, [pc, #80]	; (80028fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d009      	beq.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d004      	beq.n	80028c4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a10      	ldr	r2, [pc, #64]	; (8002900 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d10c      	bne.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	68ba      	ldr	r2, [r7, #8]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3714      	adds	r7, #20
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40012c00 	.word	0x40012c00
 8002900:	40000400 	.word	0x40000400

08002904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr

08002928 <__libc_init_array>:
 8002928:	b570      	push	{r4, r5, r6, lr}
 800292a:	2600      	movs	r6, #0
 800292c:	4d0c      	ldr	r5, [pc, #48]	; (8002960 <__libc_init_array+0x38>)
 800292e:	4c0d      	ldr	r4, [pc, #52]	; (8002964 <__libc_init_array+0x3c>)
 8002930:	1b64      	subs	r4, r4, r5
 8002932:	10a4      	asrs	r4, r4, #2
 8002934:	42a6      	cmp	r6, r4
 8002936:	d109      	bne.n	800294c <__libc_init_array+0x24>
 8002938:	f000 f822 	bl	8002980 <_init>
 800293c:	2600      	movs	r6, #0
 800293e:	4d0a      	ldr	r5, [pc, #40]	; (8002968 <__libc_init_array+0x40>)
 8002940:	4c0a      	ldr	r4, [pc, #40]	; (800296c <__libc_init_array+0x44>)
 8002942:	1b64      	subs	r4, r4, r5
 8002944:	10a4      	asrs	r4, r4, #2
 8002946:	42a6      	cmp	r6, r4
 8002948:	d105      	bne.n	8002956 <__libc_init_array+0x2e>
 800294a:	bd70      	pop	{r4, r5, r6, pc}
 800294c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002950:	4798      	blx	r3
 8002952:	3601      	adds	r6, #1
 8002954:	e7ee      	b.n	8002934 <__libc_init_array+0xc>
 8002956:	f855 3b04 	ldr.w	r3, [r5], #4
 800295a:	4798      	blx	r3
 800295c:	3601      	adds	r6, #1
 800295e:	e7f2      	b.n	8002946 <__libc_init_array+0x1e>
 8002960:	080029bc 	.word	0x080029bc
 8002964:	080029bc 	.word	0x080029bc
 8002968:	080029bc 	.word	0x080029bc
 800296c:	080029c0 	.word	0x080029c0

08002970 <memset>:
 8002970:	4603      	mov	r3, r0
 8002972:	4402      	add	r2, r0
 8002974:	4293      	cmp	r3, r2
 8002976:	d100      	bne.n	800297a <memset+0xa>
 8002978:	4770      	bx	lr
 800297a:	f803 1b01 	strb.w	r1, [r3], #1
 800297e:	e7f9      	b.n	8002974 <memset+0x4>

08002980 <_init>:
 8002980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002982:	bf00      	nop
 8002984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002986:	bc08      	pop	{r3}
 8002988:	469e      	mov	lr, r3
 800298a:	4770      	bx	lr

0800298c <_fini>:
 800298c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800298e:	bf00      	nop
 8002990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002992:	bc08      	pop	{r3}
 8002994:	469e      	mov	lr, r3
 8002996:	4770      	bx	lr
